{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nvar _0n = BigInt(0);\nvar _1n = BigInt(1);\nvar _2n = BigInt(2);\nvar _8n = BigInt(8);\nvar CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nvar CURVE = Object.freeze({\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n  l: CU_O,\n  n: CU_O,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n});\nexport { CURVE };\nvar POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nvar SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nvar SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nvar SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nvar INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nvar ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nvar D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nvar ExtendedPoint = /*#__PURE__*/function () {\n  function ExtendedPoint(x, y, z, t) {\n    _classCallCheck(this, ExtendedPoint);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n  _createClass(ExtendedPoint, [{\n    key: \"equals\",\n    value: function equals(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z;\n      var X2 = other.x,\n        Y2 = other.y,\n        Z2 = other.z;\n      var X1Z2 = mod(X1 * Z2);\n      var X2Z1 = mod(X2 * Z1);\n      var Y1Z2 = mod(Y1 * Z2);\n      var Y2Z1 = mod(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n  }, {\n    key: \"double\",\n    value: function double() {\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z;\n      var a = CURVE.a;\n      var A = mod(X1 * X1);\n      var B = mod(Y1 * Y1);\n      var C = mod(_2n * mod(Z1 * Z1));\n      var D = mod(a * A);\n      var x1y1 = X1 + Y1;\n      var E = mod(mod(x1y1 * x1y1) - A - B);\n      var G = D + B;\n      var F = G - C;\n      var H = D - B;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z,\n        T1 = this.t;\n      var X2 = other.x,\n        Y2 = other.y,\n        Z2 = other.z,\n        T2 = other.t;\n      var A = mod((Y1 - X1) * (Y2 + X2));\n      var B = mod((Y1 + X1) * (Y2 - X2));\n      var F = mod(B - A);\n      if (F === _0n) return this.double();\n      var C = mod(Z1 * _2n * T2);\n      var D = mod(T1 * _2n * Z2);\n      var E = D + C;\n      var G = B + A;\n      var H = D - C;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"precomputeWindow\",\n    value: function precomputeWindow(W) {\n      var windows = 1 + 256 / W;\n      var points = [];\n      var p = this;\n      var base = p;\n      for (var window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        for (var i = 1; i < Math.pow(2, W - 1); i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    }\n  }, {\n    key: \"wNAF\",\n    value: function wNAF(n, affinePoint) {\n      if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n      var W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n      if (256 % W) {\n        throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n      }\n      var precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n      if (!precomputes) {\n        precomputes = this.precomputeWindow(W);\n        if (affinePoint && W !== 1) {\n          precomputes = ExtendedPoint.normalizeZ(precomputes);\n          pointPrecomputes.set(affinePoint, precomputes);\n        }\n      }\n      var p = ExtendedPoint.ZERO;\n      var f = ExtendedPoint.BASE;\n      var windows = 1 + 256 / W;\n      var windowSize = Math.pow(2, W - 1);\n      var mask = BigInt(Math.pow(2, W) - 1);\n      var maxNumber = Math.pow(2, W);\n      var shiftBy = BigInt(W);\n      for (var window = 0; window < windows; window++) {\n        var offset = window * windowSize;\n        var wbits = Number(n & mask);\n        n >>= shiftBy;\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        var offset1 = offset;\n        var offset2 = offset + Math.abs(wbits) - 1;\n        var cond1 = window % 2 !== 0;\n        var cond2 = wbits < 0;\n        if (wbits === 0) {\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar, affinePoint) {\n      return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      var n = normalizeScalar(scalar, CURVE.l, false);\n      var G = ExtendedPoint.BASE;\n      var P0 = ExtendedPoint.ZERO;\n      if (n === _0n) return P0;\n      if (this.equals(P0) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n);\n      var p = P0;\n      var d = this;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n  }, {\n    key: \"isSmallOrder\",\n    value: function isSmallOrder() {\n      return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      var p = this.multiplyUnsafe(CURVE.l / _2n).double();\n      if (CURVE.l % _2n) p = p.add(this);\n      return p.equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"toAffine\",\n    value: function toAffine(invZ) {\n      var x = this.x,\n        y = this.y,\n        z = this.z;\n      var is0 = this.equals(ExtendedPoint.ZERO);\n      if (invZ == null) invZ = is0 ? _8n : invert(z);\n      var ax = mod(x * invZ);\n      var ay = mod(y * invZ);\n      var zz = mod(z * invZ);\n      if (is0) return Point.ZERO;\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return new Point(ax, ay);\n    }\n  }, {\n    key: \"fromRistrettoBytes\",\n    value: function fromRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"toRistrettoBytes\",\n    value: function toRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"fromRistrettoHash\",\n    value: function fromRistrettoHash() {\n      legacyRist();\n    }\n  }], [{\n    key: \"fromAffine\",\n    value: function fromAffine(p) {\n      if (!(p instanceof Point)) {\n        throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n      }\n      if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n      return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n  }, {\n    key: \"toAffineBatch\",\n    value: function toAffineBatch(points) {\n      var toInv = invertBatch(points.map(function (p) {\n        return p.z;\n      }));\n      return points.map(function (p, i) {\n        return p.toAffine(toInv[i]);\n      });\n    }\n  }, {\n    key: \"normalizeZ\",\n    value: function normalizeZ(points) {\n      return this.toAffineBatch(points).map(this.fromAffine);\n    }\n  }]);\n  return ExtendedPoint;\n}();\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n  var neg = item.negate();\n  return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\nvar RistrettoPoint = /*#__PURE__*/function () {\n  function RistrettoPoint(ep) {\n    _classCallCheck(this, RistrettoPoint);\n    this.ep = ep;\n  }\n  _createClass(RistrettoPoint, [{\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var _this$ep = this.ep,\n        x = _this$ep.x,\n        y = _this$ep.y,\n        z = _this$ep.z,\n        t = _this$ep.t;\n      var u1 = mod(mod(z + y) * mod(z - y));\n      var u2 = mod(x * y);\n      var u2sq = mod(u2 * u2);\n      var _invertSqrt = invertSqrt(mod(u1 * u2sq)),\n        invsqrt = _invertSqrt.value;\n      var D1 = mod(invsqrt * u1);\n      var D2 = mod(invsqrt * u2);\n      var zInv = mod(D1 * D2 * t);\n      var D;\n      if (edIsNegative(t * zInv)) {\n        var _x = mod(y * SQRT_M1);\n        var _y = mod(x * SQRT_M1);\n        x = _x;\n        y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2;\n      }\n      if (edIsNegative(x * zInv)) y = mod(-y);\n      var s = mod((z - y) * D);\n      if (edIsNegative(s)) s = mod(-s);\n      return numberTo32BytesLE(s);\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      assertRstPoint(other);\n      var a = this.ep;\n      var b = other.ep;\n      var one = mod(a.x * b.y) === mod(a.y * b.x);\n      var two = mod(a.y * b.y) === mod(a.x * b.x);\n      return one || two;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.add(other.ep));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n  }], [{\n    key: \"calcElligatorRistrettoMap\",\n    value: function calcElligatorRistrettoMap(r0) {\n      var d = CURVE.d;\n      var r = mod(SQRT_M1 * r0 * r0);\n      var Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n      var c = BigInt(-1);\n      var D = mod((c - d * r) * mod(r + d));\n      var _uvRatio = uvRatio(Ns, D),\n        Ns_D_is_sq = _uvRatio.isValid,\n        s = _uvRatio.value;\n      var s_ = mod(s * r0);\n      if (!edIsNegative(s_)) s_ = mod(-s_);\n      if (!Ns_D_is_sq) s = s_;\n      if (!Ns_D_is_sq) c = r;\n      var Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n      var s2 = s * s;\n      var W0 = mod((s + s) * D);\n      var W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n      var W2 = mod(_1n - s2);\n      var W3 = mod(_1n + s2);\n      return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n  }, {\n    key: \"hashToCurve\",\n    value: function hashToCurve(hex) {\n      hex = ensureBytes(hex, 64);\n      var r1 = bytes255ToNumberLE(hex.slice(0, 32));\n      var R1 = this.calcElligatorRistrettoMap(r1);\n      var r2 = bytes255ToNumberLE(hex.slice(32, 64));\n      var R2 = this.calcElligatorRistrettoMap(r2);\n      return new RistrettoPoint(R1.add(R2));\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      hex = ensureBytes(hex, 32);\n      var a = CURVE.a,\n        d = CURVE.d;\n      var emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n      var s = bytes255ToNumberLE(hex);\n      if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n      var s2 = mod(s * s);\n      var u1 = mod(_1n + a * s2);\n      var u2 = mod(_1n - a * s2);\n      var u1_2 = mod(u1 * u1);\n      var u2_2 = mod(u2 * u2);\n      var v = mod(a * d * u1_2 - u2_2);\n      var _invertSqrt2 = invertSqrt(mod(v * u2_2)),\n        isValid = _invertSqrt2.isValid,\n        I = _invertSqrt2.value;\n      var Dx = mod(I * u2);\n      var Dy = mod(I * Dx * v);\n      var x = mod((s + s) * Dx);\n      if (edIsNegative(x)) x = mod(-x);\n      var y = mod(u1 * Dy);\n      var t = mod(x * y);\n      if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n      return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n  }]);\n  return RistrettoPoint;\n}();\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nvar pointPrecomputes = new WeakMap();\nvar Point = /*#__PURE__*/function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n    this.x = x;\n    this.y = y;\n  }\n  _createClass(Point, [{\n    key: \"_setWindowSize\",\n    value: function _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var bytes = numberTo32BytesLE(this.y);\n      bytes[31] |= this.x & _1n ? 0x80 : 0;\n      return bytes;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toX25519\",\n    value: function toX25519() {\n      var y = this.y;\n      var u = mod((_1n + y) * invert(_1n - y));\n      return numberTo32BytesLE(u);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Point(mod(-this.x), this.y);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var d = CURVE.d,\n        P = CURVE.P;\n      hex = ensureBytes(hex, 32);\n      var normed = hex.slice();\n      normed[31] = hex[31] & ~0x80;\n      var y = bytesToNumberLE(normed);\n      if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n      if (!strict && y >= POW_2_256) throw new Error('Expected 0 < hex < 2**256');\n      var y2 = mod(y * y);\n      var u = mod(y2 - _1n);\n      var v = mod(d * y2 + _1n);\n      var _uvRatio2 = uvRatio(u, v),\n        isValid = _uvRatio2.isValid,\n        x = _uvRatio2.value;\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      var isXOdd = (x & _1n) === _1n;\n      var isLastByteOdd = (hex[31] & 0x80) !== 0;\n      if (isLastByteOdd !== isXOdd) {\n        x = mod(-x);\n      }\n      return new Point(x, y);\n    }\n  }, {\n    key: \"fromPrivateKey\",\n    value: function () {\n      var _fromPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getExtendedPublicKey(privateKey);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent.point);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function fromPrivateKey(_x2) {\n        return _fromPrivateKey.apply(this, arguments);\n      }\n      return fromPrivateKey;\n    }()\n  }]);\n  return Point;\n}();\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nvar Signature = /*#__PURE__*/function () {\n  function Signature(r, s) {\n    _classCallCheck(this, Signature);\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  _createClass(Signature, [{\n    key: \"assertValidity\",\n    value: function assertValidity() {\n      var r = this.r,\n        s = this.s;\n      if (!(r instanceof Point)) throw new Error('Expected Point instance');\n      normalizeScalar(s, CURVE.l, false);\n      return this;\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var u8 = new Uint8Array(64);\n      u8.set(this.r.toRawBytes());\n      u8.set(numberTo32BytesLE(this.s), 32);\n      return u8;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var bytes = ensureBytes(hex, 64);\n      var r = Point.fromHex(bytes.slice(0, 32), false);\n      var s = bytesToNumberLE(bytes.slice(32, 64));\n      return new Signature(r, s);\n    }\n  }]);\n  return Signature;\n}();\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  if (!arrays.every(function (a) {\n    return a instanceof Uint8Array;\n  })) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  var length = arrays.reduce(function (a, arr) {\n    return a + arr.length;\n  }, 0);\n  var result = new Uint8Array(length);\n  for (var i = 0, pad = 0; i < arrays.length; i++) {\n    var arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nvar hexes = Array.from({\n  length: 256\n}, function (v, i) {\n  return i.toString(16).padStart(2, '0');\n});\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  var hex = '';\n  for (var i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  var array = new Uint8Array(hex.length / 2);\n  for (var i = 0; i < array.length; i++) {\n    var j = i * 2;\n    var hexByte = hex.slice(j, j + 2);\n    var byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nfunction numberTo32BytesBE(num) {\n  var length = 32;\n  var hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nvar MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a) {\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var res = a % b;\n  return res >= _0n ? res : b + res;\n}\nfunction invert(number) {\n  var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(\"invert: expected positive integers, got n=\".concat(number, \" mod=\").concat(modulo));\n  }\n  var a = mod(number, modulo);\n  var b = modulo;\n  var x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  var gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nfunction invertBatch(nums) {\n  var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var tmp = new Array(nums.length);\n  var lastMultiplied = nums.reduce(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  var inverted = invert(lastMultiplied, p);\n  nums.reduceRight(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\nfunction pow2(x, power) {\n  var P = CURVE.P;\n  var res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n  return res;\n}\nfunction pow_2_252_3(x) {\n  var P = CURVE.P;\n  var _5n = BigInt(5);\n  var _10n = BigInt(10);\n  var _20n = BigInt(20);\n  var _40n = BigInt(40);\n  var _80n = BigInt(80);\n  var x2 = x * x % P;\n  var b2 = x2 * x % P;\n  var b4 = pow2(b2, _2n) * b2 % P;\n  var b5 = pow2(b4, _1n) * x % P;\n  var b10 = pow2(b5, _5n) * b5 % P;\n  var b20 = pow2(b10, _10n) * b10 % P;\n  var b40 = pow2(b20, _20n) * b20 % P;\n  var b80 = pow2(b40, _40n) * b40 % P;\n  var b160 = pow2(b80, _80n) * b80 % P;\n  var b240 = pow2(b160, _80n) * b80 % P;\n  var b250 = pow2(b240, _10n) * b10 % P;\n  var pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8: pow_p_5_8,\n    b2: b2\n  };\n}\nfunction uvRatio(u, v) {\n  var v3 = mod(v * v * v);\n  var v7 = mod(v3 * v3 * v);\n  var pow = pow_2_252_3(u * v7).pow_p_5_8;\n  var x = mod(u * v3 * pow);\n  var vx2 = mod(v * x * x);\n  var root1 = x;\n  var root2 = mod(x * SQRT_M1);\n  var useRoot1 = vx2 === u;\n  var useRoot2 = vx2 === mod(-u);\n  var noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n  return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  for (var i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n  var bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(\"Expected \".concat(expectedLength, \" bytes\"));\n  return bytes;\n}\nfunction normalizeScalar(num, max) {\n  var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, POW_2_256)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(\"Expected 32 bytes\");\n  return key;\n}\nfunction getKeyFromHash(hashed) {\n  var head = adjustBytes25519(hashed.slice(0, 32));\n  var prefix = hashed.slice(32, 64);\n  var scalar = modlLE(head);\n  var point = Point.BASE.multiply(scalar);\n  var pointBytes = point.toRawBytes();\n  return {\n    head: head,\n    prefix: prefix,\n    scalar: scalar,\n    point: point,\n    pointBytes: pointBytes\n  };\n}\nvar _sha512Sync;\nfunction sha512s() {\n  if (typeof _sha512Sync !== 'function') throw new Error('utils.sha512Sync must be set to use sync methods');\n  return _sha512Sync.apply(void 0, arguments);\n}\nfunction getExtendedPublicKey(_x3) {\n  return _getExtendedPublicKey.apply(this, arguments);\n}\nfunction _getExtendedPublicKey() {\n  _getExtendedPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = getKeyFromHash;\n          _context3.next = 3;\n          return utils.sha512(checkPrivateKey(key));\n        case 3:\n          _context3.t1 = _context3.sent;\n          return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1));\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getExtendedPublicKey.apply(this, arguments);\n}\nfunction getExtendedPublicKeySync(key) {\n  return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport function getPublicKey(_x4) {\n  return _getPublicKey.apply(this, arguments);\n}\nfunction _getPublicKey() {\n  _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(privateKey) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return getExtendedPublicKey(privateKey);\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent.pointBytes);\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _getPublicKey.apply(this, arguments);\n}\nfunction getPublicKeySync(privateKey) {\n  return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport function sign(_x5, _x6) {\n  return _sign.apply(this, arguments);\n}\nfunction _sign() {\n  _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message, privateKey) {\n    var _yield$getExtendedPub, prefix, scalar, pointBytes, r, R, k, s;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          message = ensureBytes(message);\n          _context5.next = 3;\n          return getExtendedPublicKey(privateKey);\n        case 3:\n          _yield$getExtendedPub = _context5.sent;\n          prefix = _yield$getExtendedPub.prefix;\n          scalar = _yield$getExtendedPub.scalar;\n          pointBytes = _yield$getExtendedPub.pointBytes;\n          _context5.t0 = modlLE;\n          _context5.next = 10;\n          return utils.sha512(prefix, message);\n        case 10:\n          _context5.t1 = _context5.sent;\n          r = (0, _context5.t0)(_context5.t1);\n          R = Point.BASE.multiply(r);\n          _context5.t2 = modlLE;\n          _context5.next = 16;\n          return utils.sha512(R.toRawBytes(), pointBytes, message);\n        case 16:\n          _context5.t3 = _context5.sent;\n          k = (0, _context5.t2)(_context5.t3);\n          s = mod(r + k * scalar, CURVE.l);\n          return _context5.abrupt(\"return\", new Signature(R, s).toRawBytes());\n        case 20:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _sign.apply(this, arguments);\n}\nfunction signSync(message, privateKey) {\n  message = ensureBytes(message);\n  var _getExtendedPublicKey2 = getExtendedPublicKeySync(privateKey),\n    prefix = _getExtendedPublicKey2.prefix,\n    scalar = _getExtendedPublicKey2.scalar,\n    pointBytes = _getExtendedPublicKey2.pointBytes;\n  var r = modlLE(sha512s(prefix, message));\n  var R = Point.BASE.multiply(r);\n  var k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n  var s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n  var _ref = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig),\n    r = _ref.r,\n    s = _ref.s;\n  var SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  return {\n    r: r,\n    s: s,\n    SB: SB,\n    pub: publicKey,\n    msg: message\n  };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n  var k = modlLE(hashed);\n  var kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  var RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport function verify(_x7, _x8, _x9) {\n  return _verify.apply(this, arguments);\n}\nfunction _verify() {\n  _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(sig, message, publicKey) {\n    var _prepareVerification2, r, SB, msg, pub, hashed;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _prepareVerification2 = prepareVerification(sig, message, publicKey), r = _prepareVerification2.r, SB = _prepareVerification2.SB, msg = _prepareVerification2.msg, pub = _prepareVerification2.pub;\n          _context6.next = 3;\n          return utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n        case 3:\n          hashed = _context6.sent;\n          return _context6.abrupt(\"return\", finishVerification(pub, r, SB, hashed));\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _verify.apply(this, arguments);\n}\nfunction verifySync(sig, message, publicKey) {\n  var _prepareVerification = prepareVerification(sig, message, publicKey),\n    r = _prepareVerification.r,\n    SB = _prepareVerification.SB,\n    msg = _prepareVerification.msg,\n    pub = _prepareVerification.pub;\n  var hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\nexport var sync = {\n  getExtendedPublicKey: getExtendedPublicKeySync,\n  getPublicKey: getPublicKeySync,\n  sign: signSync,\n  verify: verifySync\n};\nexport function getSharedSecret(_x10, _x11) {\n  return _getSharedSecret.apply(this, arguments);\n}\nfunction _getSharedSecret() {\n  _getSharedSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(privateKey, publicKey) {\n    var _yield$getExtendedPub2, head, u;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return getExtendedPublicKey(privateKey);\n        case 2:\n          _yield$getExtendedPub2 = _context7.sent;\n          head = _yield$getExtendedPub2.head;\n          u = Point.fromHex(publicKey).toX25519();\n          return _context7.abrupt(\"return\", curve25519.scalarMult(head, u));\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _getSharedSecret.apply(this, arguments);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n  var dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n  var P = CURVE.P;\n  var u = normalizeScalar(pointU, P);\n  var k = normalizeScalar(scalar, P);\n  var a24 = BigInt(121665);\n  var x_1 = u;\n  var x_2 = _1n;\n  var z_2 = _0n;\n  var x_3 = u;\n  var z_3 = _1n;\n  var swap = _0n;\n  var sw;\n  for (var t = BigInt(255 - 1); t >= _0n; t--) {\n    var k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    var A = x_2 + z_2;\n    var AA = mod(A * A);\n    var B = x_2 - z_2;\n    var BB = mod(B * B);\n    var E = AA - BB;\n    var C = x_3 + z_3;\n    var D = x_3 - z_3;\n    var DA = mod(D * A);\n    var CB = mod(C * B);\n    var dacb = DA + CB;\n    var da_cb = DA - CB;\n    x_3 = mod(dacb * dacb);\n    z_3 = mod(x_1 * mod(da_cb * da_cb));\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n  var _pow_2_252_ = pow_2_252_3(z_2),\n    pow_p_5_8 = _pow_2_252_.pow_p_5_8,\n    b2 = _pow_2_252_.b2;\n  var xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n  var u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\nexport var curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n  scalarMult: function scalarMult(privateKey, publicKey) {\n    var u = decodeUCoordinate(publicKey);\n    var p = decodeScalar25519(privateKey);\n    var pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n  scalarMultBase: function scalarMultBase(privateKey) {\n    return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n  }\n};\nvar crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexport var utils = {\n  bytesToHex: bytesToHex,\n  hexToBytes: hexToBytes,\n  concatBytes: concatBytes,\n  getExtendedPublicKey: getExtendedPublicKey,\n  mod: mod,\n  invert: invert,\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  hashToPrivateScalar: function hashToPrivateScalar(hash) {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n  },\n  randomBytes: function randomBytes() {\n    var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      var randomBytes = crypto.node.randomBytes;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: function randomPrivateKey() {\n    return utils.randomBytes(32);\n  },\n  sha512: function () {\n    var _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var message,\n        buffer,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            message = concatBytes.apply(void 0, _args2);\n            if (!crypto.web) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 4;\n            return crypto.web.subtle.digest('SHA-512', message.buffer);\n          case 4:\n            buffer = _context2.sent;\n            return _context2.abrupt(\"return\", new Uint8Array(buffer));\n          case 8:\n            if (!crypto.node) {\n              _context2.next = 12;\n              break;\n            }\n            return _context2.abrupt(\"return\", Uint8Array.from(crypto.node.createHash('sha512').update(message).digest()));\n          case 12:\n            throw new Error(\"The environment doesn't have sha512 function\");\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    function sha512() {\n      return _sha.apply(this, arguments);\n    }\n    return sha512;\n  }(),\n  precompute: function precompute() {\n    var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    var cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n    cached._setWindowSize(windowSize);\n    cached.multiply(_2n);\n    return cached;\n  },\n  sha512Sync: undefined\n};\nObject.defineProperties(utils, {\n  sha512Sync: {\n    configurable: false,\n    get: function get() {\n      return _sha512Sync;\n    },\n    set: function set(val) {\n      if (!_sha512Sync) _sha512Sync = val;\n    }\n  }\n});","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","_8n","CU_O","CURVE","Object","freeze","a","d","P","l","n","h","Gx","Gy","POW_2_256","SQRT_M1","SQRT_D","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","_classCallCheck","_createClass","key","value","equals","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","precomputeWindow","W","windows","points","p","base","window","push","i","Math","pow","wNAF","affinePoint","BASE","Point","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","normalizeZ","set","ZERO","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","toAffine","invZ","is0","invert","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","fromAffine","TypeError","toAffineBatch","toInv","invertBatch","map","condition","item","neg","assertRstPoint","RistrettoPoint","ep","toRawBytes","_this$ep","u1","u2","u2sq","_invertSqrt","invertSqrt","invsqrt","D1","D2","zInv","edIsNegative","_x","_y","s","numberTo32BytesLE","toHex","bytesToHex","toString","b","one","two","calcElligatorRistrettoMap","r0","r","Ns","c","_uvRatio","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hashToCurve","hex","ensureBytes","r1","bytes255ToNumberLE","slice","R1","r2","R2","fromHex","emsg","equalBytes","u1_2","u2_2","v","_invertSqrt2","I","Dx","Dy","WeakMap","_setWindowSize","delete","bytes","toX25519","u","strict","arguments","length","undefined","normed","bytesToNumberLE","y2","_uvRatio2","isXOdd","isLastByteOdd","_fromPrivateKey","_asyncToGenerator","_regeneratorRuntime","mark","_callee","privateKey","wrap","_callee$","_context","prev","next","getExtendedPublicKey","abrupt","sent","point","stop","fromPrivateKey","_x2","apply","Signature","assertValidity","u8","Uint8Array","concatBytes","_len","arrays","Array","_key","every","reduce","arr","result","pad","hexes","from","padStart","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","num","reverse","MAX_255B","res","number","modulo","concat","q","m","gcd","nums","tmp","lastMultiplied","acc","inverted","reduceRight","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","hash","b1","expectedLength","max","isSafeInteger","adjustBytes25519","decodeScalar25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","_x3","_getExtendedPublicKey","_callee3","_callee3$","_context3","t0","utils","sha512","t1","getExtendedPublicKeySync","getPublicKey","_x4","_getPublicKey","_callee4","_callee4$","_context4","getPublicKeySync","sign","_x5","_x6","_sign","_callee5","message","_yield$getExtendedPub","R","k","_callee5$","_context5","t2","t3","signSync","_getExtendedPublicKey2","prepareVerification","sig","publicKey","_ref","SB","pub","msg","finishVerification","kA","RkA","verify","_x7","_x8","_x9","_verify","_callee6","_prepareVerification2","_callee6$","_context6","verifySync","_prepareVerification","sync","getSharedSecret","_x10","_x11","_getSharedSecret","_callee7","_yield$getExtendedPub2","_callee7$","_context7","curve25519","scalarMult","cswap","swap","x_2","x_3","dummy","montgomeryLadder","pointU","a24","x_1","z_2","z_3","sw","k_t","AA","BB","DA","CB","dacb","da_cb","_pow_2_252_","xp2","encodeUCoordinate","decodeUCoordinate","uEnc","BASE_POINT_U","pu","scalarMultBase","crypto","node","web","self","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","_sha","_callee2","_args2","_callee2$","_context2","subtle","digest","createHash","update","precompute","cached","sha512Sync","defineProperties","configurable","val"],"sources":["/Users/ewanm/projects/node_modules/@noble/ed25519/lib/esm/index.js"],"sourcesContent":["/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}