{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nvar _get = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _assertThisInitialized = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _inherits = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nvar buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nvar Layout = /*#__PURE__*/function () {\n  function Layout(span, property) {\n    _classCallCheck(this, Layout);\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  _createClass(Layout, [{\n    key: \"makeDestinationObject\",\n    value: function makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n  }, {\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 > this.span) {\n        throw new RangeError('indeterminate span');\n      }\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n  }, {\n    key: \"replicate\",\n    value: function replicate(property) {\n      var rv = Object.create(this.constructor.prototype);\n      Object.assign(rv, this);\n      rv.property = property;\n      return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      return undefined;\n    }\n  }]);\n  return Layout;\n}();\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function value(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function value(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nvar ExternalLayout = /*#__PURE__*/function (_Layout) {\n  _inherits(ExternalLayout, _Layout);\n  var _super = _createSuper(ExternalLayout);\n  function ExternalLayout() {\n    _classCallCheck(this, ExternalLayout);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExternalLayout, [{\n    key: \"isCount\",\n    value:\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    function isCount() {\n      throw new Error('ExternalLayout is abstract');\n    }\n  }]);\n  return ExternalLayout;\n}(Layout);\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nvar GreedyCount = /*#__PURE__*/function (_ExternalLayout) {\n  _inherits(GreedyCount, _ExternalLayout);\n  var _super2 = _createSuper(GreedyCount);\n  function GreedyCount() {\n    var _this;\n    var elementSpan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var property = arguments.length > 1 ? arguments[1] : undefined;\n    _classCallCheck(this, GreedyCount);\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    _this = _super2.call(this, -1, property);\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n  _createClass(GreedyCount, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return true;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var rem = b.length - offset;\n      return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return 0;\n    }\n  }]);\n  return GreedyCount;\n}(ExternalLayout);\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nvar OffsetLayout = /*#__PURE__*/function (_ExternalLayout2) {\n  _inherits(OffsetLayout, _ExternalLayout2);\n  var _super3 = _createSuper(OffsetLayout);\n  function OffsetLayout(layout) {\n    var _this2;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var property = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, OffsetLayout);\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n    if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n    _this2 = _super3.call(this, layout.span, property || layout.property);\n    /** The subordinated layout. */\n    _this2.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n    _this2.offset = offset;\n    return _this2;\n  }\n  /** @override */\n  _createClass(OffsetLayout, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return this.layout instanceof UInt || this.layout instanceof UIntBE;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return this.layout.encode(src, b, offset + this.offset);\n    }\n  }]);\n  return OffsetLayout;\n}(ExternalLayout);\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UInt = /*#__PURE__*/function (_Layout2) {\n  _inherits(UInt, _Layout2);\n  var _super4 = _createSuper(UInt);\n  function UInt(span, property) {\n    var _this3;\n    _classCallCheck(this, UInt);\n    _this3 = _super4.call(this, span, property);\n    if (6 < _this3.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this3;\n  }\n  /** @override */\n  _createClass(UInt, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n  return UInt;\n}(Layout);\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UIntBE = /*#__PURE__*/function (_Layout3) {\n  _inherits(UIntBE, _Layout3);\n  var _super5 = _createSuper(UIntBE);\n  function UIntBE(span, property) {\n    var _this4;\n    _classCallCheck(this, UIntBE);\n    _this4 = _super5.call(this, span, property);\n    if (6 < _this4.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this4;\n  }\n  /** @override */\n  _createClass(UIntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n  return UIntBE;\n}(Layout);\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Int = /*#__PURE__*/function (_Layout4) {\n  _inherits(Int, _Layout4);\n  var _super6 = _createSuper(Int);\n  function Int(span, property) {\n    var _this5;\n    _classCallCheck(this, Int);\n    _this5 = _super6.call(this, span, property);\n    if (6 < _this5.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this5;\n  }\n  /** @override */\n  _createClass(Int, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n  return Int;\n}(Layout);\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar IntBE = /*#__PURE__*/function (_Layout5) {\n  _inherits(IntBE, _Layout5);\n  var _super7 = _createSuper(IntBE);\n  function IntBE(span, property) {\n    var _this6;\n    _classCallCheck(this, IntBE);\n    _this6 = _super7.call(this, span, property);\n    if (6 < _this6.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n    return _this6;\n  }\n  /** @override */\n  _createClass(IntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n  return IntBE;\n}(Layout);\nexports.IntBE = IntBE;\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearUInt64 = /*#__PURE__*/function (_Layout6) {\n  _inherits(NearUInt64, _Layout6);\n  var _super8 = _createSuper(NearUInt64);\n  function NearUInt64(property) {\n    _classCallCheck(this, NearUInt64);\n    return _super8.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(NearUInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readUInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeUInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n  return NearUInt64;\n}(Layout);\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearUInt64BE = /*#__PURE__*/function (_Layout7) {\n  _inherits(NearUInt64BE, _Layout7);\n  var _super9 = _createSuper(NearUInt64BE);\n  function NearUInt64BE(property) {\n    _classCallCheck(this, NearUInt64BE);\n    return _super9.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(NearUInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readUInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n  return NearUInt64BE;\n}(Layout);\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearInt64 = /*#__PURE__*/function (_Layout8) {\n  _inherits(NearInt64, _Layout8);\n  var _super10 = _createSuper(NearInt64);\n  function NearInt64(property) {\n    _classCallCheck(this, NearInt64);\n    return _super10.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(NearInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n  return NearInt64;\n}(Layout);\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nvar NearInt64BE = /*#__PURE__*/function (_Layout9) {\n  _inherits(NearInt64BE, _Layout9);\n  var _super11 = _createSuper(NearInt64BE);\n  function NearInt64BE(property) {\n    _classCallCheck(this, NearInt64BE);\n    return _super11.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(NearInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n  return NearInt64BE;\n}(Layout);\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Float = /*#__PURE__*/function (_Layout10) {\n  _inherits(Float, _Layout10);\n  var _super12 = _createSuper(Float);\n  function Float(property) {\n    _classCallCheck(this, Float);\n    return _super12.call(this, 4, property);\n  }\n  /** @override */\n  _createClass(Float, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n      return 4;\n    }\n  }]);\n  return Float;\n}(Layout);\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar FloatBE = /*#__PURE__*/function (_Layout11) {\n  _inherits(FloatBE, _Layout11);\n  var _super13 = _createSuper(FloatBE);\n  function FloatBE(property) {\n    _classCallCheck(this, FloatBE);\n    return _super13.call(this, 4, property);\n  }\n  /** @override */\n  _createClass(FloatBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n      return 4;\n    }\n  }]);\n  return FloatBE;\n}(Layout);\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Double = /*#__PURE__*/function (_Layout12) {\n  _inherits(Double, _Layout12);\n  var _super14 = _createSuper(Double);\n  function Double(property) {\n    _classCallCheck(this, Double);\n    return _super14.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(Double, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n      return 8;\n    }\n  }]);\n  return Double;\n}(Layout);\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar DoubleBE = /*#__PURE__*/function (_Layout13) {\n  _inherits(DoubleBE, _Layout13);\n  var _super15 = _createSuper(DoubleBE);\n  function DoubleBE(property) {\n    _classCallCheck(this, DoubleBE);\n    return _super15.call(this, 8, property);\n  }\n  /** @override */\n  _createClass(DoubleBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n      return 8;\n    }\n  }]);\n  return DoubleBE;\n}(Layout);\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Sequence = /*#__PURE__*/function (_Layout14) {\n  _inherits(Sequence, _Layout14);\n  var _super16 = _createSuper(Sequence);\n  function Sequence(elementLayout, count, property) {\n    var _this7;\n    _classCallCheck(this, Sequence);\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    var span = -1;\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n    _this7 = _super16.call(this, span, property);\n    /** The layout for individual elements of the sequence. */\n    _this7.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    _this7.count = count;\n    return _this7;\n  }\n  /** @override */\n  _createClass(Sequence, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (0 <= this.span) {\n        return this.span;\n      }\n      var span = 0;\n      var count = this.count;\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n      if (0 < this.elementLayout.span) {\n        span = count * this.elementLayout.span;\n      } else {\n        var idx = 0;\n        while (idx < count) {\n          span += this.elementLayout.getSpan(b, offset + span);\n          ++idx;\n        }\n      }\n      return span;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var rv = [];\n      var i = 0;\n      var count = this.count;\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n      while (i < count) {\n        rv.push(this.elementLayout.decode(b, offset));\n        offset += this.elementLayout.getSpan(b, offset);\n        i += 1;\n      }\n      return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var elo = this.elementLayout;\n      var span = src.reduce(function (span, v) {\n        return span + elo.encode(v, b, offset + span);\n      }, 0);\n      if (this.count instanceof ExternalLayout) {\n        this.count.encode(src.length, b, offset);\n      }\n      return span;\n    }\n  }]);\n  return Sequence;\n}(Layout);\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nvar Structure = /*#__PURE__*/function (_Layout15) {\n  _inherits(Structure, _Layout15);\n  var _super17 = _createSuper(Structure);\n  function Structure(fields, property, decodePrefixes) {\n    var _this8;\n    _classCallCheck(this, Structure);\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n    var _iterator = _createForOfIteratorHelper(fields),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fd = _step.value;\n        if (0 > fd.span && undefined === fd.property) {\n          throw new Error('fields cannot contain unnamed variable-length layout');\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var span = -1;\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {\n      // ignore error\n    }\n    _this8 = _super17.call(this, span, property);\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    _this8.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    _this8.decodePrefixes = !!decodePrefixes;\n    return _this8;\n  }\n  /** @override */\n  _createClass(Structure, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (0 <= this.span) {\n        return this.span;\n      }\n      var span = 0;\n      try {\n        span = this.fields.reduce(function (span, fd) {\n          var fsp = fd.getSpan(b, offset);\n          offset += fsp;\n          return span + fsp;\n        }, 0);\n      } catch (e) {\n        throw new RangeError('indeterminate span');\n      }\n      return span;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var dest = this.makeDestinationObject();\n      var _iterator2 = _createForOfIteratorHelper(this.fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fd = _step2.value;\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b, offset);\n          }\n          offset += fd.getSpan(b, offset);\n          if (this.decodePrefixes && b.length === offset) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var firstOffset = offset;\n      var lastOffset = 0;\n      var lastWrote = 0;\n      var _iterator3 = _createForOfIteratorHelper(this.fields),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var fd = _step3.value;\n          var span = fd.span;\n          lastWrote = 0 < span ? span : 0;\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n            if (undefined !== fv) {\n              lastWrote = fd.encode(fv, b, offset);\n              if (0 > span) {\n                /* Read the as-encoded span, which is not necessarily the\n                 * same as what we wrote. */\n                span = fd.getSpan(b, offset);\n              }\n            }\n          }\n          lastOffset = offset;\n          offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return lastOffset + lastWrote - firstOffset;\n    }\n    /** @override */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      var dest = this.makeDestinationObject();\n      var _iterator4 = _createForOfIteratorHelper(this.fields),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var fd = _step4.value;\n          if (undefined !== fd.property && 0 < values.length) {\n            dest[fd.property] = values.shift();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n  }, {\n    key: \"layoutFor\",\n    value: function layoutFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      var _iterator5 = _createForOfIteratorHelper(this.fields),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var fd = _step5.value;\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n  }, {\n    key: \"offsetOf\",\n    value: function offsetOf(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      var offset = 0;\n      var _iterator6 = _createForOfIteratorHelper(this.fields),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var fd = _step6.value;\n          if (fd.property === property) {\n            return offset;\n          }\n          if (0 > fd.span) {\n            offset = -1;\n          } else if (0 <= offset) {\n            offset += fd.span;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return undefined;\n    }\n  }]);\n  return Structure;\n}(Layout);\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nvar UnionDiscriminator = /*#__PURE__*/function () {\n  function UnionDiscriminator(property) {\n    _classCallCheck(this, UnionDiscriminator);\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  _createClass(UnionDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n  }]);\n  return UnionDiscriminator;\n}();\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nvar UnionLayoutDiscriminator = /*#__PURE__*/function (_UnionDiscriminator) {\n  _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);\n  var _super18 = _createSuper(UnionLayoutDiscriminator);\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this9;\n    _classCallCheck(this, UnionLayoutDiscriminator);\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n    _this9 = _super18.call(this, property || layout.property || 'variant');\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    _this9.layout = layout;\n    return _this9;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  _createClass(UnionLayoutDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return this.layout.encode(src, b, offset);\n    }\n  }]);\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Union = /*#__PURE__*/function (_Layout16) {\n  _inherits(Union, _Layout16);\n  var _super19 = _createSuper(Union);\n  function Union(discr, defaultLayout, property) {\n    var _this10;\n    _classCallCheck(this, Union);\n    var discriminator;\n    if (discr instanceof UInt || discr instanceof UIntBE) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    var span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {\n        span += discriminator.layout.span;\n      }\n    }\n    _this10 = _super19.call(this, span, property);\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    _this10.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    _this10.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    _this10.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    _this10.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n    var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    _this10.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    _this10.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n    return _this10;\n  }\n  /** @override */\n  _createClass(Union, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (0 <= this.span) {\n        return this.span;\n      }\n      /* Default layouts always have non-negative span, so we don't have\n       * one and we have to recognize the variant which will in turn\n       * determine the span. */\n      var vlo = this.getVariant(b, offset);\n      if (!vlo) {\n        throw new Error('unable to determine span for unrecognized variant');\n      }\n      return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n  }, {\n    key: \"defaultGetSourceVariant\",\n    value: function defaultGetSourceVariant(src) {\n      if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n        if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n          return undefined;\n        }\n        var vlo = this.registry[src[this.discriminator.property]];\n        if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n          return vlo;\n        }\n      } else {\n        for (var tag in this.registry) {\n          var _vlo = this.registry[tag];\n          if (_vlo.property && Object.prototype.hasOwnProperty.call(src, _vlo.property)) {\n            return _vlo;\n          }\n        }\n      }\n      throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest;\n      var dlo = this.discriminator;\n      var discr = dlo.decode(b, offset);\n      var clo = this.registry[discr];\n      if (undefined === clo) {\n        var defaultLayout = this.defaultLayout;\n        var contentOffset = 0;\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n        dest = this.makeDestinationObject();\n        dest[dlo.property] = discr;\n        // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n      } else {\n        dest = clo.decode(b, offset);\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var vlo = this.getSourceVariant(src);\n      if (undefined === vlo) {\n        var dlo = this.discriminator;\n        // this.defaultLayout is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        var clo = this.defaultLayout;\n        var contentOffset = 0;\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n        dlo.encode(src[dlo.property], b, offset);\n        // clo.property is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n      }\n      return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n  }, {\n    key: \"addVariant\",\n    value: function addVariant(variant, layout, property) {\n      var rv = new VariantLayout(this, variant, layout, property);\n      this.registry[variant] = rv;\n      return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(vb) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var variant;\n      if (vb instanceof Uint8Array) {\n        variant = this.discriminator.decode(vb, offset);\n      } else {\n        variant = vb;\n      }\n      return this.registry[variant];\n    }\n  }]);\n  return Union;\n}(Layout);\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nvar VariantLayout = /*#__PURE__*/function (_Layout17) {\n  _inherits(VariantLayout, _Layout17);\n  var _super20 = _createSuper(VariantLayout);\n  function VariantLayout(union, variant, layout, property) {\n    var _this11;\n    _classCallCheck(this, VariantLayout);\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    var span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    _this11 = _super20.call(this, span, property);\n    /** The {@link Union} to which this variant belongs. */\n    _this11.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    _this11.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    _this11.layout = layout || null;\n    return _this11;\n  }\n  /** @override */\n  _createClass(VariantLayout, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (0 <= this.span) {\n        /* Will be equal to the containing union span if that is not\n         * variable. */\n        return this.span;\n      }\n      var contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      /* Span is defined solely by the variant (and prefix discriminator) */\n      var span = 0;\n      if (this.layout) {\n        span = this.layout.getSpan(b, offset + contentOffset);\n      }\n      return contentOffset + span;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n      if (this !== this.union.getVariant(b, offset)) {\n        throw new Error('variant mismatch');\n      }\n      var contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      if (this.layout) {\n        dest[this.property] = this.layout.decode(b, offset + contentOffset);\n      } else if (this.property) {\n        dest[this.property] = true;\n      } else if (this.union.usesPrefixDiscriminator) {\n        dest[this.union.discriminator.property] = this.variant;\n      }\n      return dest;\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {\n        throw new TypeError('variant lacks property ' + this.property);\n      }\n      this.union.discriminator.encode(this.variant, b, offset);\n      var span = contentOffset;\n      if (this.layout) {\n        this.layout.encode(src[this.property], b, offset + contentOffset);\n        span += this.layout.getSpan(b, offset + contentOffset);\n        if (0 <= this.union.span && span > this.union.span) {\n          throw new Error('encoded variant overruns containing union');\n        }\n      }\n      return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      if (this.layout) {\n        return this.layout.fromArray(values);\n      }\n      return undefined;\n    }\n  }]);\n  return VariantLayout;\n}(Layout);\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar BitStructure = /*#__PURE__*/function (_Layout18) {\n  _inherits(BitStructure, _Layout18);\n  var _super21 = _createSuper(BitStructure);\n  function BitStructure(word, msb, property) {\n    var _this12;\n    _classCallCheck(this, BitStructure);\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    _this12 = _super21.call(this, word.span, property);\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    _this12.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    _this12.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    _this12.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    var value = 0;\n    _this12._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    _this12._packedGetValue = function () {\n      return value;\n    };\n    return _this12;\n  }\n  /** @override */\n  _createClass(BitStructure, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n      var value = this.word.decode(b, offset);\n      this._packedSetValue(value);\n      var _iterator7 = _createForOfIteratorHelper(this.fields),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var fd = _step7.value;\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var value = this.word.decode(b, offset);\n      this._packedSetValue(value);\n      var _iterator8 = _createForOfIteratorHelper(this.fields),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var fd = _step8.value;\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n            if (undefined !== fv) {\n              fd.encode(fv);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n  }, {\n    key: \"addField\",\n    value: function addField(bits, property) {\n      var bf = new BitField(this, bits, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"addBoolean\",\n    value: function addBoolean(property) {\n      // This is my Boolean, not the Javascript one.\n      var bf = new Boolean(this, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n  }, {\n    key: \"fieldFor\",\n    value: function fieldFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      var _iterator9 = _createForOfIteratorHelper(this.fields),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var fd = _step9.value;\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return undefined;\n    }\n  }]);\n  return BitStructure;\n}(Layout);\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nvar BitField = /*#__PURE__*/function () {\n  function BitField(container, bits, property) {\n    _classCallCheck(this, BitField);\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n    /** The span of this value in bits. */\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  _createClass(BitField, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      var word = this.container._packedGetValue();\n      var wordValue = fixBitwiseResult(word & this.wordMask);\n      var value = wordValue >>> this.start;\n      return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n        throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n      }\n      var word = this.container._packedGetValue();\n      var wordValue = fixBitwiseResult(value << this.start);\n      this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n    }\n  }]);\n  return BitField;\n}();\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nvar Boolean = /*#__PURE__*/function (_BitField) {\n  _inherits(Boolean, _BitField);\n  var _super22 = _createSuper(Boolean);\n  function Boolean(container, property) {\n    _classCallCheck(this, Boolean);\n    return _super22.call(this, container, 1, property);\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  _createClass(Boolean, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return !!_get(_getPrototypeOf(Boolean.prototype), \"decode\", this).call(this, b, offset);\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('boolean' === typeof value) {\n        // BitField requires integer values\n        value = +value;\n      }\n      _get(_getPrototypeOf(Boolean.prototype), \"encode\", this).call(this, value);\n    }\n  }]);\n  return Boolean;\n}(BitField);\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Blob = /*#__PURE__*/function (_Layout19) {\n  _inherits(Blob, _Layout19);\n  var _super23 = _createSuper(Blob);\n  function Blob(length, property) {\n    var _this13;\n    _classCallCheck(this, Blob);\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    var span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    _this13 = _super23.call(this, span, property);\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    _this13.length = length;\n    return _this13;\n  }\n  /** @override */\n  _createClass(Blob, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      var span = this.span;\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n      return span;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.span;\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n      return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      var span = this.length;\n      if (this.length instanceof ExternalLayout) {\n        span = src.length;\n      }\n      if (!(src instanceof Uint8Array && span === src.length)) {\n        throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n      }\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Uint8Array');\n      }\n      var srcBuffer = uint8ArrayToBuffer(src);\n      uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n      if (this.length instanceof ExternalLayout) {\n        this.length.encode(span, b, offset);\n      }\n      return span;\n    }\n  }]);\n  return Blob;\n}(Layout);\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar CString = /*#__PURE__*/function (_Layout20) {\n  _inherits(CString, _Layout20);\n  var _super24 = _createSuper(CString);\n  function CString(property) {\n    _classCallCheck(this, CString);\n    return _super24.call(this, -1, property);\n  }\n  /** @override */\n  _createClass(CString, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var idx = offset;\n      while (idx < b.length && 0 !== b[idx]) {\n        idx += 1;\n      }\n      return 1 + idx - offset;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n      return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n      var buffer = uint8ArrayToBuffer(b);\n      srcb.copy(buffer, offset);\n      buffer[offset + span] = 0;\n      return span + 1;\n    }\n  }]);\n  return CString;\n}(Layout);\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar UTF8 = /*#__PURE__*/function (_Layout21) {\n  _inherits(UTF8, _Layout21);\n  var _super25 = _createSuper(UTF8);\n  function UTF8(maxSpan, property) {\n    var _this14;\n    _classCallCheck(this, UTF8);\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n    _this14 = _super25.call(this, -1, property);\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    _this14.maxSpan = maxSpan;\n    return _this14;\n  }\n  /** @override */\n  _createClass(UTF8, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      return b.length - offset;\n    }\n    /** @override */\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n      return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n      srcb.copy(uint8ArrayToBuffer(b), offset);\n      return span;\n    }\n  }]);\n  return UTF8;\n}(Layout);\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nvar Constant = /*#__PURE__*/function (_Layout22) {\n  _inherits(Constant, _Layout22);\n  var _super26 = _createSuper(Constant);\n  function Constant(value, property) {\n    var _this15;\n    _classCallCheck(this, Constant);\n    _this15 = _super26.call(this, 0, property);\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    _this15.value = value;\n    return _this15;\n  }\n  /** @override */\n  _createClass(Constant, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.value;\n    }\n    /** @override */\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      /* Constants take no space */\n      return 0;\n    }\n  }]);\n  return Constant;\n}(Layout);\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\nexports.constant = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"names":["_get","require","default","_getPrototypeOf","_assertThisInitialized","_createForOfIteratorHelper","_inherits","_createSuper","_classCallCheck","_createClass","buffer_1","checkUint8Array","b","Uint8Array","TypeError","exports","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","key","value","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","constructor","prototype","assign","fromArray","values","undefined","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","defineProperty","encode","writable","decode","ExternalLayout","_Layout","_super","apply","arguments","isCount","GreedyCount","_ExternalLayout","_super2","_this","elementSpan","rem","Math","floor","src","OffsetLayout","_ExternalLayout2","_super3","_this2","UInt","UIntBE","_Layout2","_super4","_this3","readUIntLE","writeUIntLE","_Layout3","_super5","_this4","readUIntBE","writeUIntBE","Int","_Layout4","_super6","_this5","readIntLE","writeIntLE","IntBE","_Layout5","_super7","_this6","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","_Layout6","_super8","readUInt32LE","split","writeUInt32LE","NearUInt64BE","_Layout7","_super9","readUInt32BE","writeUInt32BE","NearInt64","_Layout8","_super10","readInt32LE","writeInt32LE","NearInt64BE","_Layout9","_super11","readInt32BE","writeInt32BE","Float","_Layout10","_super12","readFloatLE","writeFloatLE","FloatBE","_Layout11","_super13","readFloatBE","writeFloatBE","Double","_Layout12","_super14","readDoubleLE","writeDoubleLE","DoubleBE","_Layout13","_super15","readDoubleBE","writeDoubleBE","Sequence","_Layout14","_super16","elementLayout","count","_this7","idx","i","push","elo","reduce","v","Structure","_Layout15","_super17","fields","decodePrefixes","_this8","Array","isArray","acc","_iterator","_step","s","n","done","fd","err","e","f","fsp","dest","_iterator2","_step2","firstOffset","lastOffset","lastWrote","_iterator3","_step3","fv","_iterator4","_step4","shift","layoutFor","_iterator5","_step5","offsetOf","_iterator6","_step6","UnionDiscriminator","UnionLayoutDiscriminator","_UnionDiscriminator","_super18","_this9","Union","_Layout16","_super19","discr","defaultLayout","_this10","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","_Layout17","_super20","union","_this11","fixBitwiseResult","BitStructure","_Layout18","_super21","word","msb","_this12","_packedSetValue","_packedGetValue","_iterator7","_step7","_iterator8","_step8","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","_iterator9","_step9","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","_BitField","_super22","Blob","_Layout19","_super23","_this13","slice","srcBuffer","write","toString","CString","_Layout20","_super24","String","srcb","copy","UTF8","_Layout21","_super25","maxSpan","_this14","Constant","_Layout22","_super26","_this15","greedy","u8","u16","u24","u32","u40","u48","nu64","u16be","u24be","u32be","u40be","u48be","nu64be","s8","s16","s24","s32","s40","s48","ns64","s16be","s24be","s32be","s40be","s48be","ns64be","f32","f32be","f64","f64be","struct","seq","unionLayoutDiscriminator","blob","cstr","utf8","constant"],"sources":["../src/Layout.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}