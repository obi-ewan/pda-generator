{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n  {\n    var reversed = Buffer.from(buf);\n    reversed.reverse();\n    var hex = reversed.toString('hex');\n    if (hex.length === 0) {\n      return BigInt(0);\n    }\n    return BigInt(\"0x\".concat(hex));\n  }\n  return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n  {\n    var hex = buf.toString('hex');\n    if (hex.length === 0) {\n      return BigInt(0);\n    }\n    return BigInt(\"0x\".concat(hex));\n  }\n  return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n  {\n    var hex = num.toString(16);\n    var buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    buffer.reverse();\n    return buffer;\n  }\n  // Allocation is done here, since it is slower using napi in C\n  return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n  {\n    var hex = num.toString(16);\n    return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n  }\n  return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;","map":{"version":3,"names":["Object","defineProperty","exports","value","converter","toBigIntLE","buf","reversed","Buffer","from","reverse","hex","toString","length","BigInt","concat","toBigInt","toBigIntBE","toBufferLE","num","width","buffer","padStart","slice","fromBigInt","allocUnsafe","toBufferBE"],"sources":["/Users/ewanm/projects/node_modules/bigint-buffer/dist/browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,SAAS;AACb;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,GAAG,EAAE;EACrB;IACI,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC;IACjCC,QAAQ,CAACG,OAAO,EAAE;IAClB,IAAMC,GAAG,GAAGJ,QAAQ,CAACK,QAAQ,CAAC,KAAK,CAAC;IACpC,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;MAClB,OAAOC,MAAM,CAAC,CAAC,CAAC;IACpB;IACA,OAAOA,MAAM,MAAAC,MAAA,CAAMJ,GAAG,EAAG;EAC7B;EACA,OAAOP,SAAS,CAACY,QAAQ,CAACV,GAAG,EAAE,KAAK,CAAC;AACzC;AACAJ,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,SAASY,UAAUA,CAACX,GAAG,EAAE;EACrB;IACI,IAAMK,GAAG,GAAGL,GAAG,CAACM,QAAQ,CAAC,KAAK,CAAC;IAC/B,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;MAClB,OAAOC,MAAM,CAAC,CAAC,CAAC;IACpB;IACA,OAAOA,MAAM,MAAAC,MAAA,CAAMJ,GAAG,EAAG;EAC7B;EACA,OAAOP,SAAS,CAACY,QAAQ,CAACV,GAAG,EAAE,IAAI,CAAC;AACxC;AACAJ,OAAO,CAACe,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,GAAG,EAAEC,KAAK,EAAE;EAC5B;IACI,IAAMT,GAAG,GAAGQ,GAAG,CAACP,QAAQ,CAAC,EAAE,CAAC;IAC5B,IAAMS,MAAM,GAAGb,MAAM,CAACC,IAAI,CAACE,GAAG,CAACW,QAAQ,CAACF,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC,EAAEH,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACnFC,MAAM,CAACX,OAAO,EAAE;IAChB,OAAOW,MAAM;EACjB;EACA;EACA,OAAOjB,SAAS,CAACoB,UAAU,CAACL,GAAG,EAAEX,MAAM,CAACiB,WAAW,CAACL,KAAK,CAAC,EAAE,KAAK,CAAC;AACtE;AACAlB,OAAO,CAACgB,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,UAAUA,CAACP,GAAG,EAAEC,KAAK,EAAE;EAC5B;IACI,IAAMT,GAAG,GAAGQ,GAAG,CAACP,QAAQ,CAAC,EAAE,CAAC;IAC5B,OAAOJ,MAAM,CAACC,IAAI,CAACE,GAAG,CAACW,QAAQ,CAACF,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC,EAAEH,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;EAC/E;EACA,OAAOhB,SAAS,CAACoB,UAAU,CAACL,GAAG,EAAEX,MAAM,CAACiB,WAAW,CAACL,KAAK,CAAC,EAAE,IAAI,CAAC;AACrE;AACAlB,OAAO,CAACwB,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}