{"ast":null,"code":"var _jsxFileName = \"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/PdaGenerator.js\",\n  _s = $RefreshSig$();\nimport { PublicKey } from '@solana/web3.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdaGenerator() {\n  _s();\n  const [programIdSeed, setProgramIdSeed] = useState('');\n  const [accountSeeds, setAccountSeeds] = useState([]);\n  const [pda, setPda] = useState(null);\n  const addAccountSeedField = () => {\n    setAccountSeeds([...accountSeeds, '']);\n  };\n  const updateAccountSeed = (index, value) => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds[index] = value;\n    setAccountSeeds(newAccountSeeds);\n  };\n  const removeAccountSeedField = index => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds.splice(index, 1);\n    setAccountSeeds(newAccountSeeds);\n  };\n  const generatePda = async () => {\n    try {\n      const programId = new PublicKey(programIdSeed);\n      const accountSeedBuffers = accountSeeds.map(seed => new TextEncoder().encode(seed));\n      const [pdaPublicKey, _] = await PublicKey.findProgramAddress(accountSeedBuffers, programId);\n      setPda(pdaPublicKey.toBase58());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"programIdSeed\",\n        children: \"Program ID seed:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"programIdSeed\",\n        value: programIdSeed,\n        onChange: e => setProgramIdSeed(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"accountSeeds\",\n        children: \"Account seeds:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addAccountSeedField,\n        children: \"Add seed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), accountSeeds.map((seed, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: seed,\n          onChange: e => updateAccountSeed(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeAccountSeedField(index),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generatePda,\n      children: \"Generate PDA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), pda && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"PDA: \", pda]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(PdaGenerator, \"ojRZRw5P4y21OVUfz36cj39t8uM=\");\n_c = PdaGenerator;\nexport default PdaGenerator;\nvar _c;\n$RefreshReg$(_c, \"PdaGenerator\");","map":{"version":3,"names":["PublicKey","useState","jsxDEV","_jsxDEV","PdaGenerator","_s","programIdSeed","setProgramIdSeed","accountSeeds","setAccountSeeds","pda","setPda","addAccountSeedField","updateAccountSeed","index","value","newAccountSeeds","removeAccountSeedField","splice","generatePda","programId","accountSeedBuffers","map","seed","TextEncoder","encode","pdaPublicKey","_","findProgramAddress","toBase58","err","console","error","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/PdaGenerator.js"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { useState } from 'react';\n\nfunction PdaGenerator() {\n  const [programIdSeed, setProgramIdSeed] = useState('');\n  const [accountSeeds, setAccountSeeds] = useState([]);\n  const [pda, setPda] = useState(null);\n\n  const addAccountSeedField = () => {\n    setAccountSeeds([...accountSeeds, '']);\n  };\n\n  const updateAccountSeed = (index, value) => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds[index] = value;\n    setAccountSeeds(newAccountSeeds);\n  };\n\n  const removeAccountSeedField = (index) => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds.splice(index, 1);\n    setAccountSeeds(newAccountSeeds);\n  };\n\n  const generatePda = async () => {\n    try {\n      const programId = new PublicKey(programIdSeed);\n      const accountSeedBuffers = accountSeeds.map((seed) => new TextEncoder().encode(seed));\n      const [pdaPublicKey, _] = await PublicKey.findProgramAddress(accountSeedBuffers, programId);\n      setPda(pdaPublicKey.toBase58());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <label htmlFor=\"programIdSeed\">Program ID seed:</label>\n        <input type=\"text\" id=\"programIdSeed\" value={programIdSeed} onChange={(e) => setProgramIdSeed(e.target.value)} />\n      </div>\n      <div>\n        <label htmlFor=\"accountSeeds\">Account seeds:</label>\n        <button onClick={addAccountSeedField}>Add seed</button>\n        {accountSeeds.map((seed, index) => (\n          <div key={index}>\n            <input type=\"text\" value={seed} onChange={(e) => updateAccountSeed(index, e.target.value)} />\n            <button onClick={() => removeAccountSeedField(index)}>Remove</button>\n          </div>\n        ))}\n      </div>\n      <button onClick={generatePda}>Generate PDA</button>\n      {pda && <div>PDA: {pda}</div>}\n    </div>\n  );\n}\n\nexport default PdaGenerator;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}