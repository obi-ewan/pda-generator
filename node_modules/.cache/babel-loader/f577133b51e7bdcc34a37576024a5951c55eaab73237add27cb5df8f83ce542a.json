{"ast":null,"code":"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n    this.failures = () => {\n      var _cached;\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction run(value, struct) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function* () {\n    const {\n      path = [],\n      branch = [value],\n      coerce = false,\n      mask = false\n    } = options;\n    const ctx = {\n      path,\n      branch\n    };\n    if (coerce) {\n      value = struct.coercer(value, ctx);\n      if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n        for (const key in value) {\n          if (struct.schema[key] === undefined) {\n            delete value[key];\n          }\n        }\n      }\n    }\n    let valid = true;\n    for (const failure of struct.validator(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n      const ts = run(v, s, {\n        path: k === undefined ? path : [...path, k],\n        branch: k === undefined ? branch : [...branch, v],\n        coerce,\n        mask\n      });\n      for (const t of ts) {\n        if (t[0]) {\n          valid = false;\n          yield [t[0], undefined];\n        } else if (coerce) {\n          v = t[1];\n          if (k === undefined) {\n            value = v;\n          } else if (value instanceof Map) {\n            value.set(k, v);\n          } else if (value instanceof Set) {\n            value.add(v);\n          } else if (isObject(value)) {\n            value[k] = v;\n          }\n        }\n      }\n    }\n    if (valid) {\n      for (const failure of struct.refiner(value, ctx)) {\n        valid = false;\n        yield [failure, undefined];\n      }\n    }\n    if (valid) {\n      yield [undefined, value];\n    }\n  }();\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return validate(value, this, options);\n  }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\nfunction assign() {\n  for (var _len = arguments.length, Structs = new Array(_len), _key = 0; _key < _len; _key++) {\n    Structs[_key] = arguments[_key];\n  }\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nfunction deprecated(struct, log) {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      var _struct;\n      (_struct = struct) != null ? _struct : struct = fn();\n      yield* struct.entries(value, ctx);\n    },\n    validator(value, ctx) {\n      var _struct2;\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n    coercer(value, ctx) {\n      var _struct3;\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {\n    ...schema\n  };\n  for (const key of keys) {\n    delete subschema[key];\n  }\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nfunction partial(struct) {\n  const schema = struct instanceof Struct ? {\n    ...struct.schema\n  } : {\n    ...struct\n  };\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n  for (const key of values) {\n    schema[key] = key;\n  }\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n    validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n    coercer(value) {\n      return isObject(value) ? {\n        ...value\n      } : value;\n    }\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n    validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\nfunction tuple(Elements) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length);\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never];\n        }\n      }\n    },\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = [];\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction defaulted(struct, fallback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n    if (x === undefined) {\n      return f;\n    }\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = {\n        ...x\n      };\n      let changed = false;\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n      if (changed) {\n        return ret;\n      }\n    }\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nfunction empty(struct) {\n  const expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', value => {\n    if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return size === 0 || expected + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nfunction max(struct, threshold) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nfunction min(struct, threshold) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nfunction size(struct, min) {\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : min;\n  const expected = \"Expected a \" + struct.type;\n  const of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nfunction refine(struct, name, refiner) {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n      for (const failure of failures) {\n        yield {\n          ...failure,\n          refinement: name\n        };\n      }\n    }\n  });\n}\nexport { Struct, StructError, any, array, assert, assign, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };","map":{"version":3,"names":["StructError","TypeError","constructor","failure","failures","cached","message","rest","path","msg","length","join","Object","assign","name","_cached","isIterable","x","isObject","Symbol","iterator","isPlainObject","prototype","toString","call","getPrototypeOf","print","value","JSON","stringify","shiftIterator","input","done","next","undefined","toFailure","result","context","struct","branch","type","refinement","key","toFailures","r","run","options","arguments","coerce","mask","ctx","coercer","schema","Array","isArray","valid","validator","k","v","s","entries","ts","t","Map","set","Set","add","refiner","Struct","props","assert","create","is","validate","tuples","tuple","error","_len","Structs","_key","schemas","map","object","define","deprecated","log","dynamic","fn","lazy","_struct","_struct2","_struct3","omit","keys","subschema","partial","optional","pick","console","warn","any","array","Element","i","slice","boolean","date","Date","isNaN","getTime","enums","values","description","includes","func","instance","Class","integer","Number","isInteger","intersection","S","literal","constant","Key","Value","never","nullable","number","knowns","Never","unknowns","delete","record","regexp","RegExp","string","Elements","Math","max","union","first","push","unknown","condition","defaulted","fallback","f","strict","ret","changed","trimmed","trim","empty","expected","refine","size","threshold","exclusive","min","pattern","test","source","of"],"sources":["/Users/ewanm/projects/node_modules/superstruct/src/error.ts","/Users/ewanm/projects/node_modules/superstruct/src/utils.ts","/Users/ewanm/projects/node_modules/superstruct/src/struct.ts","/Users/ewanm/projects/node_modules/superstruct/src/structs/utilities.ts","/Users/ewanm/projects/node_modules/superstruct/src/structs/types.ts","/Users/ewanm/projects/node_modules/superstruct/src/structs/coercions.ts","/Users/ewanm/projects/node_modules/superstruct/src/structs/refinements.ts"],"sourcesContent":["/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { Struct, Refiner } from '../struct'\nimport { toFailures } from '../utils'\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nexport function empty<\n  T extends string | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>): Struct<T, S> {\n  const expected = `Expected an empty ${struct.type}`\n\n  return refine(struct, 'empty', (value) => {\n    if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        size === 0 || `${expected} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        length === 0 ||\n        `${expected} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nexport function max<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'max', (value) => {\n    return exclusive\n      ? value < threshold\n      : value <= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nexport function min<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'min', (value) => {\n    return exclusive\n      ? value > threshold\n      : value >= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nexport function pattern<T extends string, S extends any>(\n  struct: Struct<T, S>,\n  regexp: RegExp\n): Struct<T, S> {\n  return refine(struct, 'pattern', (value) => {\n    return (\n      regexp.test(value) ||\n      `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`\n    )\n  })\n}\n\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nexport function size<\n  T extends string | number | Date | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>, min: number, max: number = min): Struct<T, S> {\n  const expected = `Expected a ${struct.type}`\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``\n\n  return refine(struct, 'size', (value) => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return (\n        (min <= value && value <= max) ||\n        `${expected} ${of} but received \\`${value}\\``\n      )\n    } else if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        (min <= size && size <= max) ||\n        `${expected} with a size ${of} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        (min <= length && length <= max) ||\n        `${expected} with a length ${of} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nexport function refine<T, S>(\n  struct: Struct<T, S>,\n  name: string,\n  refiner: Refiner<T>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx)\n      const result = refiner(value, ctx)\n      const failures = toFailures(result, ctx, struct, value)\n\n      for (const failure of failures) {\n        yield { ...failure, refinement: name }\n      }\n    },\n  })\n}\n"],"mappings":"AAAA;;;;AAcA;;;;;;;;MASaA,WAAA,SAAoBC,SAAA;EAU/BC,YAAYC,OAAA,EAAkBC,QAAA;IAC5B,IAAIC,MAAJ;IACA,MAAM;MAAEC,OAAF;MAAW,GAAGC;IAAd,IAAuBJ,OAA7B;IACA,MAAM;MAAEK;IAAF,IAAWL,OAAjB;IACA,MAAMM,GAAG,GACPD,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoBJ,OAApB,iBAA0CE,IAAI,CAACG,IAAL,CAAU,GAAV,CAA1C,YAA+DL,OADjE;IAEA,MAAMG,GAAN;IACAG,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBN,IAApB;IACA,KAAKO,IAAL,GAAY,KAAKZ,WAAL,CAAiBY,IAA7B;IACA,KAAKV,QAAL,GAAgB;;MACd,QAAAW,OAAA,GAAQV,MAAR,YAAAU,OAAA,GAAQV,MAAR,GAAmB,CAACF,OAAD,EAAU,GAAGC,QAAQ,EAArB,CAAnB;IACD,CAFD;EAGD;;;AC1CH;;;AAIA,SAASY,UAATA,CAAuBC,CAAvB;EACE,OAAOC,QAAQ,CAACD,CAAD,CAAR,IAAe,OAAOA,CAAC,CAACE,MAAM,CAACC,QAAR,CAAR,KAA8B,UAApD;AACD;AAED;;;;SAIgBF,SAASD,CAAA;EACvB,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,IAAI,IAArC;AACD;AAED;;;;SAIgBI,cAAcJ,CAAA;EAC5B,IAAIL,MAAM,CAACU,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,CAA/B,MAAsC,iBAA1C,EAA6D;IAC3D,OAAO,KAAP;EACD;EAED,MAAMK,SAAS,GAAGV,MAAM,CAACa,cAAP,CAAsBR,CAAtB,CAAlB;EACA,OAAOK,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKV,MAAM,CAACU,SAAlD;AACD;AAED;;;;SAIgBI,MAAMC,KAAA;EACpB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAA5B,QAAuDA,KAA9D;AACD;AAED;;;;;SAKgBG,cAAiBC,KAAA;EAC/B,MAAM;IAAEC,IAAF;IAAQL;EAAR,IAAkBI,KAAK,CAACE,IAAN,EAAxB;EACA,OAAOD,IAAI,GAAGE,SAAH,GAAeP,KAA1B;AACD;AAED;;;;SAIgBQ,UACdC,MAAA,EACAC,OAAA,EACAC,MAAA,EACAX,KAAA;EAEA,IAAIS,MAAM,KAAK,IAAf,EAAqB;IACnB;EACD,CAFD,MAEO,IAAIA,MAAM,KAAK,KAAf,EAAsB;IAC3BA,MAAM,GAAG,EAAT;EACD,CAFM,MAEA,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IACrCA,MAAM,GAAG;MAAE9B,OAAO,EAAE8B;IAAX,CAAT;EACD;EAED,MAAM;IAAE5B,IAAF;IAAQ+B;EAAR,IAAmBF,OAAzB;EACA,MAAM;IAAEG;EAAF,IAAWF,MAAjB;EACA,MAAM;IACJG,UADI;IAEJnC,OAAO,kCAAiCkC,IAAjC,UACLC,UAAU,0BAAyBA,UAAzB,SAA0C,EAD/C,0BAEcf,KAAK,CAACC,KAAD,CAFnB;EAFH,IAKFS,MALJ;EAOA,OAAO;IACLT,KADK;IAELa,IAFK;IAGLC,UAHK;IAILC,GAAG,EAAElC,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAJJ;IAKLF,IALK;IAML+B,MANK;IAOL,GAAGH,MAPE;IAQL9B;EARK,CAAP;AAUD;AAED;;;;UAIiBqC,WACfP,MAAA,EACAC,OAAA,EACAC,MAAA,EACAX,KAAA;EAEA,IAAI,CAACX,UAAU,CAACoB,MAAD,CAAf,EAAyB;IACvBA,MAAM,GAAG,CAACA,MAAD,CAAT;EACD;EAED,KAAK,MAAMQ,CAAX,IAAgBR,MAAhB,EAAwB;IACtB,MAAMjC,OAAO,GAAGgC,SAAS,CAACS,CAAD,EAAIP,OAAJ,EAAaC,MAAb,EAAqBX,KAArB,CAAzB;IAEA,IAAIxB,OAAJ,EAAa;MACX,MAAMA,OAAN;IACD;EACF;AACF;AAED;;;;;SAKiB0C,IACflB,KAAA,EACAW,MAAA;EAAA,IACAQ,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAKI;EAAA;IAEJ,MAAM;MAAEvC,IAAI,GAAG,EAAT;MAAa+B,MAAM,GAAG,CAACZ,KAAD,CAAtB;MAA+BqB,MAAM,GAAG,KAAxC;MAA+CC,IAAI,GAAG;IAAtD,IAAgEH,OAAtE;IACA,MAAMI,GAAG,GAAY;MAAE1C,IAAF;MAAQ+B;IAAR,CAArB;IAEA,IAAIS,MAAJ,EAAY;MACVrB,KAAK,GAAGW,MAAM,CAACa,OAAP,CAAexB,KAAf,EAAsBuB,GAAtB,CAAR;MAEA,IACED,IAAI,IACJX,MAAM,CAACE,IAAP,KAAgB,MADhB,IAEAtB,QAAQ,CAACoB,MAAM,CAACc,MAAR,CAFR,IAGAlC,QAAQ,CAACS,KAAD,CAHR,IAIA,CAAC0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,CALH,EAME;QACA,KAAK,MAAMe,GAAX,IAAkBf,KAAlB,EAAyB;UACvB,IAAIW,MAAM,CAACc,MAAP,CAAcV,GAAd,MAAuBR,SAA3B,EAAsC;YACpC,OAAOP,KAAK,CAACe,GAAD,CAAZ;UACD;QACF;MACF;IACF;IAED,IAAIa,KAAK,GAAG,IAAZ;IAEA,KAAK,MAAMpD,OAAX,IAAsBmC,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAAtB,EAAoD;MAClDK,KAAK,GAAG,KAAR;MACA,MAAM,CAACpD,OAAD,EAAU+B,SAAV,CAAN;IACD;IAED,KAAK,IAAI,CAACuB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAT,IAAsBrB,MAAM,CAACsB,OAAP,CAAejC,KAAf,EAAsBuB,GAAtB,CAAtB,EAAkD;MAChD,MAAMW,EAAE,GAAGhB,GAAG,CAACa,CAAD,EAAIC,CAAJ,EAAiB;QAC7BnD,IAAI,EAAEiD,CAAC,KAAKvB,SAAN,GAAkB1B,IAAlB,GAAyB,CAAC,GAAGA,IAAJ,EAAUiD,CAAV,CADF;QAE7BlB,MAAM,EAAEkB,CAAC,KAAKvB,SAAN,GAAkBK,MAAlB,GAA2B,CAAC,GAAGA,MAAJ,EAAYmB,CAAZ,CAFN;QAG7BV,MAH6B;QAI7BC;MAJ6B,CAAjB,CAAd;MAOA,KAAK,MAAMa,CAAX,IAAgBD,EAAhB,EAAoB;QAClB,IAAIC,CAAC,CAAC,CAAD,CAAL,EAAU;UACRP,KAAK,GAAG,KAAR;UACA,MAAM,CAACO,CAAC,CAAC,CAAD,CAAF,EAAO5B,SAAP,CAAN;QACD,CAHD,MAGO,IAAIc,MAAJ,EAAY;UACjBU,CAAC,GAAGI,CAAC,CAAC,CAAD,CAAL;UAEA,IAAIL,CAAC,KAAKvB,SAAV,EAAqB;YACnBP,KAAK,GAAG+B,CAAR;UACD,CAFD,MAEO,IAAI/B,KAAK,YAAYoC,GAArB,EAA0B;YAC/BpC,KAAK,CAACqC,GAAN,CAAUP,CAAV,EAAaC,CAAb;UACD,CAFM,MAEA,IAAI/B,KAAK,YAAYsC,GAArB,EAA0B;YAC/BtC,KAAK,CAACuC,GAAN,CAAUR,CAAV;UACD,CAFM,MAEA,IAAIxC,QAAQ,CAACS,KAAD,CAAZ,EAAqB;YAC1BA,KAAK,CAAC8B,CAAD,CAAL,GAAWC,CAAX;UACD;QACF;MACF;IACF;IAED,IAAIH,KAAJ,EAAW;MACT,KAAK,MAAMpD,OAAX,IAAsBmC,MAAM,CAAC6B,OAAP,CAAexC,KAAf,EAA2BuB,GAA3B,CAAtB,EAAuD;QACrDK,KAAK,GAAG,KAAR;QACA,MAAM,CAACpD,OAAD,EAAU+B,SAAV,CAAN;MACD;IACF;IAED,IAAIqB,KAAJ,EAAW;MACT,MAAM,CAACrB,SAAD,EAAYP,KAAZ,CAAN;IACD;EACF;AAAA;;AC9LD;;;;;;MAMayC,MAAA;EAYXlE,YAAYmE,KAAA;IAQV,MAAM;MACJ7B,IADI;MAEJY,MAFI;MAGJI,SAHI;MAIJW,OAJI;MAKJhB,OAAO,GAAIxB,KAAD,IAAoBA,KAL1B;MAMJiC,OAAO,GAAG,UAAAA,CAAA;IANN,IAOFS,KAPJ;IASA,KAAK7B,IAAL,GAAYA,IAAZ;IACA,KAAKY,MAAL,GAAcA,MAAd;IACA,KAAKQ,OAAL,GAAeA,OAAf;IACA,KAAKT,OAAL,GAAeA,OAAf;IAEA,IAAIK,SAAJ,EAAe;MACb,KAAKA,SAAL,GAAiB,CAAC7B,KAAD,EAAQU,OAAR;QACf,MAAMD,MAAM,GAAGoB,SAAS,CAAC7B,KAAD,EAAQU,OAAR,CAAxB;QACA,OAAOM,UAAU,CAACP,MAAD,EAASC,OAAT,EAAkB,IAAlB,EAAwBV,KAAxB,CAAjB;MACD,CAHD;IAID,CALD,MAKO;MACL,KAAK6B,SAAL,GAAiB,MAAM,EAAvB;IACD;IAED,IAAIW,OAAJ,EAAa;MACX,KAAKA,OAAL,GAAe,CAACxC,KAAD,EAAQU,OAAR;QACb,MAAMD,MAAM,GAAG+B,OAAO,CAACxC,KAAD,EAAQU,OAAR,CAAtB;QACA,OAAOM,UAAU,CAACP,MAAD,EAASC,OAAT,EAAkB,IAAlB,EAAwBV,KAAxB,CAAjB;MACD,CAHD;IAID,CALD,MAKO;MACL,KAAKwC,OAAL,GAAe,MAAM,EAArB;IACD;EACF;EAED;;;;EAIAG,MAAMA,CAAC3C,KAAD;IACJ,OAAO2C,MAAM,CAAC3C,KAAD,EAAQ,IAAR,CAAb;EACD;EAED;;;;EAIA4C,MAAMA,CAAC5C,KAAD;IACJ,OAAO4C,MAAM,CAAC5C,KAAD,EAAQ,IAAR,CAAb;EACD;EAED;;;;EAIA6C,EAAEA,CAAC7C,KAAD;IACA,OAAO6C,EAAE,CAAC7C,KAAD,EAAQ,IAAR,CAAT;EACD;EAED;;;;;EAKAsB,IAAIA,CAACtB,KAAD;IACF,OAAOsB,IAAI,CAACtB,KAAD,EAAQ,IAAR,CAAX;EACD;EAED;;;;;;;;;EASA8C,QAAQA,CACN9C,KADM;IAAA,IAENmB,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAEI,EAJE;IAMN,OAAO0B,QAAQ,CAAC9C,KAAD,EAAQ,IAAR,EAAcmB,OAAd,CAAf;EACD;;AAGH;;;;SAIgBwB,OACd3C,KAAA,EACAW,MAAA;EAEA,MAAMF,MAAM,GAAGqC,QAAQ,CAAC9C,KAAD,EAAQW,MAAR,CAAvB;EAEA,IAAIF,MAAM,CAAC,CAAD,CAAV,EAAe;IACb,MAAMA,MAAM,CAAC,CAAD,CAAZ;EACD;AACF;AAED;;;;SAIgBmC,OAAa5C,KAAA,EAAgBW,MAAA;EAC3C,MAAMF,MAAM,GAAGqC,QAAQ,CAAC9C,KAAD,EAAQW,MAAR,EAAgB;IAAEU,MAAM,EAAE;EAAV,CAAhB,CAAvB;EAEA,IAAIZ,MAAM,CAAC,CAAD,CAAV,EAAe;IACb,MAAMA,MAAM,CAAC,CAAD,CAAZ;EACD,CAFD,MAEO;IACL,OAAOA,MAAM,CAAC,CAAD,CAAb;EACD;AACF;AAED;;;;SAIgBa,KAAWtB,KAAA,EAAgBW,MAAA;EACzC,MAAMF,MAAM,GAAGqC,QAAQ,CAAC9C,KAAD,EAAQW,MAAR,EAAgB;IAAEU,MAAM,EAAE,IAAV;IAAgBC,IAAI,EAAE;EAAtB,CAAhB,CAAvB;EAEA,IAAIb,MAAM,CAAC,CAAD,CAAV,EAAe;IACb,MAAMA,MAAM,CAAC,CAAD,CAAZ;EACD,CAFD,MAEO;IACL,OAAOA,MAAM,CAAC,CAAD,CAAb;EACD;AACF;AAED;;;;SAIgBoC,GAAS7C,KAAA,EAAgBW,MAAA;EACvC,MAAMF,MAAM,GAAGqC,QAAQ,CAAC9C,KAAD,EAAQW,MAAR,CAAvB;EACA,OAAO,CAACF,MAAM,CAAC,CAAD,CAAd;AACD;AAED;;;;;SAKgBqC,SACd9C,KAAA,EACAW,MAAA,EAII;EAAA,IAHJQ,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAGI;EAEJ,MAAM2B,MAAM,GAAG7B,GAAG,CAAClB,KAAD,EAAQW,MAAR,EAAgBQ,OAAhB,CAAlB;EACA,MAAM6B,KAAK,GAAG7C,aAAa,CAAC4C,MAAD,CAA3B;EAEA,IAAIC,KAAK,CAAC,CAAD,CAAT,EAAc;IACZ,MAAMC,KAAK,GAAG,IAAI5E,WAAJ,CAAgB2E,KAAK,CAAC,CAAD,CAArB,EAA0B;MACtC,KAAK,MAAMb,CAAX,IAAgBY,MAAhB,EAAwB;QACtB,IAAIZ,CAAC,CAAC,CAAD,CAAL,EAAU;UACR,MAAMA,CAAC,CAAC,CAAD,CAAP;QACD;MACF;IACF,CANa,CAAd;IAQA,OAAO,CAACc,KAAD,EAAQ1C,SAAR,CAAP;EACD,CAVD,MAUO;IACL,MAAMwB,CAAC,GAAGiB,KAAK,CAAC,CAAD,CAAf;IACA,OAAO,CAACzC,SAAD,EAAYwB,CAAZ,CAAP;EACD;AACF;SC9Ie7C,OAAA,EAAU;EAAA,SAAAgE,IAAA,GAAA9B,SAAA,CAAArC,MAAA,EAAAoE,OAAA,OAAAzB,KAAA,CAAAwB,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;IAAAD,OAAA,CAAAC,IAAA,IAAAhC,SAAA,CAAAgC,IAAA;EAAA;EACxB,MAAMC,OAAO,GAAGF,OAAO,CAACG,GAAR,CAAatB,CAAD,IAAOA,CAAC,CAACP,MAArB,CAAhB;EACA,MAAMA,MAAM,GAAGxC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,GAAGmE,OAArB,CAAf;EACA,OAAOE,MAAM,CAAC9B,MAAD,CAAb;AACD;AAED;;;;SAIgB+B,OAAUrE,IAAA,EAAc0C,SAAA;EACtC,OAAO,IAAIY,MAAJ,CAAW;IAAE5B,IAAI,EAAE1B,IAAR;IAAcsC,MAAM,EAAE,IAAtB;IAA4BI;EAA5B,CAAX,CAAP;AACD;AAED;;;;;SAKgB4B,WACd9C,MAAA,EACA+C,GAAA;EAEA,OAAO,IAAIjB,MAAJ,CAAW;IAChB,GAAG9B,MADa;IAEhB6B,OAAO,EAAEA,CAACxC,KAAD,EAAQuB,GAAR,KAAgBvB,KAAK,KAAKO,SAAV,IAAuBI,MAAM,CAAC6B,OAAP,CAAexC,KAAf,EAAsBuB,GAAtB,CAFhC;IAGhBM,SAASA,CAAC7B,KAAD,EAAQuB,GAAR;MACP,IAAIvB,KAAK,KAAKO,SAAd,EAAyB;QACvB,OAAO,IAAP;MACD,CAFD,MAEO;QACLmD,GAAG,CAAC1D,KAAD,EAAQuB,GAAR,CAAH;QACA,OAAOZ,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAAP;MACD;IACF;EAVe,CAAX,CAAP;AAYD;AAED;;;;;;;;SAQgBoC,QACdC,EAAA;EAEA,OAAO,IAAInB,MAAJ,CAAW;IAChB5B,IAAI,EAAE,SADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT,EAAgBuB,GAAhB;MACE,MAAMZ,MAAM,GAAGiD,EAAE,CAAC5D,KAAD,EAAQuB,GAAR,CAAjB;MACA,OAAOZ,MAAM,CAACsB,OAAP,CAAejC,KAAf,EAAsBuB,GAAtB,CAAP;IACD,CANe;IAOhBM,SAASA,CAAC7B,KAAD,EAAQuB,GAAR;MACP,MAAMZ,MAAM,GAAGiD,EAAE,CAAC5D,KAAD,EAAQuB,GAAR,CAAjB;MACA,OAAOZ,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAAP;IACD,CAVe;IAWhBC,OAAOA,CAACxB,KAAD,EAAQuB,GAAR;MACL,MAAMZ,MAAM,GAAGiD,EAAE,CAAC5D,KAAD,EAAQuB,GAAR,CAAjB;MACA,OAAOZ,MAAM,CAACa,OAAP,CAAexB,KAAf,EAAsBuB,GAAtB,CAAP;IACD;EAde,CAAX,CAAP;AAgBD;AAED;;;;;;;;;SASgBsC,KAAQD,EAAA;EACtB,IAAIjD,MAAJ;EACA,OAAO,IAAI8B,MAAJ,CAAW;IAChB5B,IAAI,EAAE,MADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT,EAAgBuB,GAAhB;;MACE,CAAAuC,OAAA,GAAAnD,MAAM,SAAN,GAAAmD,OAAA,GAAAnD,MAAM,GAAKiD,EAAE,EAAb;MACA,OAAOjD,MAAM,CAACsB,OAAP,CAAejC,KAAf,EAAsBuB,GAAtB,CAAP;IACD,CANe;IAOhBM,SAASA,CAAC7B,KAAD,EAAQuB,GAAR;;MACP,CAAAwC,QAAA,GAAApD,MAAM,SAAN,GAAAoD,QAAA,GAAApD,MAAM,GAAKiD,EAAE,EAAb;MACA,OAAOjD,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAAP;IACD,CAVe;IAWhBC,OAAOA,CAACxB,KAAD,EAAQuB,GAAR;;MACL,CAAAyC,QAAA,GAAArD,MAAM,SAAN,GAAAqD,QAAA,GAAArD,MAAM,GAAKiD,EAAE,EAAb;MACA,OAAOjD,MAAM,CAACa,OAAP,CAAexB,KAAf,EAAsBuB,GAAtB,CAAP;IACD;EAde,CAAX,CAAP;AAgBD;AAED;;;;;;;SAOgB0C,KACdtD,MAAA,EACAuD,IAAA;EAEA,MAAM;IAAEzC;EAAF,IAAad,MAAnB;EACA,MAAMwD,SAAS,GAAQ;IAAE,GAAG1C;EAAL,CAAvB;EAEA,KAAK,MAAMV,GAAX,IAAkBmD,IAAlB,EAAwB;IACtB,OAAOC,SAAS,CAACpD,GAAD,CAAhB;EACD;EAED,OAAOwC,MAAM,CAACY,SAAD,CAAb;AACD;AAED;;;;;;;SAOgBC,QACdzD,MAAA;EAEA,MAAMc,MAAM,GACVd,MAAM,YAAY8B,MAAlB,GAA2B;IAAE,GAAG9B,MAAM,CAACc;EAAZ,CAA3B,GAAkD;IAAE,GAAGd;EAAL,CADpD;EAGA,KAAK,MAAMI,GAAX,IAAkBU,MAAlB,EAA0B;IACxBA,MAAM,CAACV,GAAD,CAAN,GAAcsD,QAAQ,CAAC5C,MAAM,CAACV,GAAD,CAAP,CAAtB;EACD;EAED,OAAOwC,MAAM,CAAC9B,MAAD,CAAb;AACD;AAED;;;;;;;SAOgB6C,KACd3D,MAAA,EACAuD,IAAA;EAEA,MAAM;IAAEzC;EAAF,IAAad,MAAnB;EACA,MAAMwD,SAAS,GAAQ,EAAvB;EAEA,KAAK,MAAMpD,GAAX,IAAkBmD,IAAlB,EAAwB;IACtBC,SAAS,CAACpD,GAAD,CAAT,GAAiBU,MAAM,CAACV,GAAD,CAAvB;EACD;EAED,OAAOwC,MAAM,CAACY,SAAD,CAAb;AACD;AAED;;;;;;SAMgBxD,OAAUxB,IAAA,EAAc0C,SAAA;EACtC0C,OAAO,CAACC,IAAR,CACE,sEADF;EAIA,OAAOhB,MAAM,CAACrE,IAAD,EAAO0C,SAAP,CAAb;AACD;;ACpND;;;;SAIgB4C,IAAA;EACd,OAAOjB,MAAM,CAAC,KAAD,EAAQ,MAAM,IAAd,CAAb;AACD;SAYekB,MAA6BC,OAAA;EAC3C,OAAO,IAAIlC,MAAJ,CAAW;IAChB5B,IAAI,EAAE,OADU;IAEhBY,MAAM,EAAEkD,OAFQ;IAGhB,CAAC1C,OAADA,CAASjC,KAAT;MACE,IAAI2E,OAAO,IAAIjD,KAAK,CAACC,OAAN,CAAc3B,KAAd,CAAf,EAAqC;QACnC,KAAK,MAAM,CAAC4E,CAAD,EAAI7C,CAAJ,CAAX,IAAqB/B,KAAK,CAACiC,OAAN,EAArB,EAAsC;UACpC,MAAM,CAAC2C,CAAD,EAAI7C,CAAJ,EAAO4C,OAAP,CAAN;QACD;MACF;IACF,CATe;IAUhBnD,OAAOA,CAACxB,KAAD;MACL,OAAO0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,IAAuBA,KAAK,CAAC6E,KAAN,EAAvB,GAAuC7E,KAA9C;IACD,CAZe;IAahB6B,SAASA,CAAC7B,KAAD;MACP,OACE0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,iDAC0CD,KAAK,CAACC,KAAD,CAFjD;IAID;EAlBe,CAAX,CAAP;AAoBD;AAED;;;;SAIgB8E,QAAA;EACd,OAAOtB,MAAM,CAAC,SAAD,EAAaxD,KAAD;IACvB,OAAO,OAAOA,KAAP,KAAiB,SAAxB;EACD,CAFY,CAAb;AAGD;AAED;;;;;;;SAOgB+E,KAAA;EACd,OAAOvB,MAAM,CAAC,MAAD,EAAUxD,KAAD;IACpB,OACGA,KAAK,YAAYgF,IAAjB,IAAyB,CAACC,KAAK,CAACjF,KAAK,CAACkF,OAAN,EAAD,CAAhC,uDACmDnF,KAAK,CAACC,KAAD,CAF1D;EAID,CALY,CAAb;AAMD;SAeemF,MAAiCC,MAAA;EAC/C,MAAM3D,MAAM,GAAQ,EAApB;EACA,MAAM4D,WAAW,GAAGD,MAAM,CAAC9B,GAAP,CAAYvB,CAAD,IAAOhC,KAAK,CAACgC,CAAD,CAAvB,EAA4B/C,IAA5B,EAApB;EAEA,KAAK,MAAM+B,GAAX,IAAkBqE,MAAlB,EAA0B;IACxB3D,MAAM,CAACV,GAAD,CAAN,GAAcA,GAAd;EACD;EAED,OAAO,IAAI0B,MAAJ,CAAW;IAChB5B,IAAI,EAAE,OADU;IAEhBY,MAFgB;IAGhBI,SAASA,CAAC7B,KAAD;MACP,OACEoF,MAAM,CAACE,QAAP,CAAgBtF,KAAhB,2BACqBqF,WADrB,yBACqDtF,KAAK,CAACC,KAAD,CAF5D;IAID;EARe,CAAX,CAAP;AAUD;AAED;;;;SAIgBuF,KAAA;EACd,OAAO/B,MAAM,CAAC,MAAD,EAAUxD,KAAD;IACpB,OACE,OAAOA,KAAP,KAAiB,UAAjB,4CACsCD,KAAK,CAACC,KAAD,CAF7C;EAID,CALY,CAAb;AAMD;AAED;;;;SAIgBwF,SACdC,KAAA;EAEA,OAAOjC,MAAM,CAAC,UAAD,EAAcxD,KAAD;IACxB,OACEA,KAAK,YAAYyF,KAAjB,qBACgBA,KAAK,CAACtG,IADtB,kCACwDY,KAAK,CAACC,KAAD,CAF/D;EAID,CALY,CAAb;AAMD;AAED;;;;SAIgB0F,QAAA;EACd,OAAOlC,MAAM,CAAC,SAAD,EAAaxD,KAAD;IACvB,OACG,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACiF,KAAK,CAACjF,KAAD,CAAnC,IAA8C2F,MAAM,CAACC,SAAP,CAAiB5F,KAAjB,CAA/C,4CACsCD,KAAK,CAACC,KAAD,CAF7C;EAID,CALY,CAAb;AAMD;SA0De6F,aAAa1C,OAAA;EAC3B,OAAO,IAAIV,MAAJ,CAAW;IAChB5B,IAAI,EAAE,cADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT,EAAgBuB,GAAhB;MACE,KAAK,MAAMuE,CAAX,IAAgB3C,OAAhB,EAAyB;QACvB,OAAO2C,CAAC,CAAC7D,OAAF,CAAUjC,KAAV,EAAiBuB,GAAjB,CAAP;MACD;IACF,CAPe;IAQhB,CAACM,SAADA,CAAW7B,KAAX,EAAkBuB,GAAlB;MACE,KAAK,MAAMuE,CAAX,IAAgB3C,OAAhB,EAAyB;QACvB,OAAO2C,CAAC,CAACjE,SAAF,CAAY7B,KAAZ,EAAmBuB,GAAnB,CAAP;MACD;IACF,CAZe;IAahB,CAACiB,OAADA,CAASxC,KAAT,EAAgBuB,GAAhB;MACE,KAAK,MAAMuE,CAAX,IAAgB3C,OAAhB,EAAyB;QACvB,OAAO2C,CAAC,CAACtD,OAAF,CAAUxC,KAAV,EAAiBuB,GAAjB,CAAP;MACD;IACF;EAjBe,CAAX,CAAP;AAmBD;SAUewE,QAAWC,QAAA;EACzB,MAAMX,WAAW,GAAGtF,KAAK,CAACiG,QAAD,CAAzB;EACA,MAAM7D,CAAC,GAAG,OAAO6D,QAAjB;EACA,OAAO,IAAIvD,MAAJ,CAAW;IAChB5B,IAAI,EAAE,SADU;IAEhBY,MAAM,EACJU,CAAC,KAAK,QAAN,IAAkBA,CAAC,KAAK,QAAxB,IAAoCA,CAAC,KAAK,SAA1C,GAAsD6D,QAAtD,GAAiE,IAHnD;IAIhBnE,SAASA,CAAC7B,KAAD;MACP,OACEA,KAAK,KAAKgG,QAAV,+BAC0BX,WAD1B,yBAC0DtF,KAAK,CAACC,KAAD,CAFjE;IAID;EATe,CAAX,CAAP;AAWD;SAYesD,IAAU2C,GAAA,EAAiBC,KAAA;EACzC,OAAO,IAAIzD,MAAJ,CAAW;IAChB5B,IAAI,EAAE,KADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAIiG,GAAG,IAAIC,KAAP,IAAgBlG,KAAK,YAAYoC,GAArC,EAA0C;QACxC,KAAK,MAAM,CAACN,CAAD,EAAIC,CAAJ,CAAX,IAAqB/B,KAAK,CAACiC,OAAN,EAArB,EAAsC;UACpC,MAAM,CAACH,CAAD,EAAcA,CAAd,EAAiBmE,GAAjB,CAAN;UACA,MAAM,CAACnE,CAAD,EAAcC,CAAd,EAAiBmE,KAAjB,CAAN;QACD;MACF;IACF,CAVe;IAWhB1E,OAAOA,CAACxB,KAAD;MACL,OAAOA,KAAK,YAAYoC,GAAjB,GAAuB,IAAIA,GAAJ,CAAQpC,KAAR,CAAvB,GAAwCA,KAA/C;IACD,CAbe;IAchB6B,SAASA,CAAC7B,KAAD;MACP,OACEA,KAAK,YAAYoC,GAAjB,gDAC4CrC,KAAK,CAACC,KAAD,CAFnD;IAID;EAnBe,CAAX,CAAP;AAqBD;AAED;;;;SAIgBmG,MAAA;EACd,OAAO3C,MAAM,CAAC,OAAD,EAAU,MAAM,KAAhB,CAAb;AACD;AAED;;;;SAIgB4C,SAAezF,MAAA;EAC7B,OAAO,IAAI8B,MAAJ,CAAW;IAChB,GAAG9B,MADa;IAEhBkB,SAAS,EAAEA,CAAC7B,KAAD,EAAQuB,GAAR,KAAgBvB,KAAK,KAAK,IAAV,IAAkBW,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAF7B;IAGhBiB,OAAO,EAAEA,CAACxC,KAAD,EAAQuB,GAAR,KAAgBvB,KAAK,KAAK,IAAV,IAAkBW,MAAM,CAAC6B,OAAP,CAAexC,KAAf,EAAsBuB,GAAtB;EAH3B,CAAX,CAAP;AAKD;AAED;;;;SAIgB8E,OAAA;EACd,OAAO7C,MAAM,CAAC,QAAD,EAAYxD,KAAD;IACtB,OACG,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACiF,KAAK,CAACjF,KAAD,CAApC,0CACoCD,KAAK,CAACC,KAAD,CAF3C;EAID,CALY,CAAb;AAMD;SAaeuD,OAA+B9B,MAAA;EAC7C,MAAM6E,MAAM,GAAG7E,MAAM,GAAGxC,MAAM,CAACiF,IAAP,CAAYzC,MAAZ,CAAH,GAAyB,EAA9C;EACA,MAAM8E,KAAK,GAAGJ,KAAK,EAAnB;EACA,OAAO,IAAI1D,MAAJ,CAAW;IAChB5B,IAAI,EAAE,QADU;IAEhBY,MAAM,EAAEA,MAAM,GAAGA,MAAH,GAAY,IAFV;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAIyB,MAAM,IAAIlC,QAAQ,CAACS,KAAD,CAAtB,EAA+B;QAC7B,MAAMwG,QAAQ,GAAG,IAAIlE,GAAJ,CAAQrD,MAAM,CAACiF,IAAP,CAAYlE,KAAZ,CAAR,CAAjB;QAEA,KAAK,MAAMe,GAAX,IAAkBuF,MAAlB,EAA0B;UACxBE,QAAQ,CAACC,MAAT,CAAgB1F,GAAhB;UACA,MAAM,CAACA,GAAD,EAAMf,KAAK,CAACe,GAAD,CAAX,EAAkBU,MAAM,CAACV,GAAD,CAAxB,CAAN;QACD;QAED,KAAK,MAAMA,GAAX,IAAkByF,QAAlB,EAA4B;UAC1B,MAAM,CAACzF,GAAD,EAAMf,KAAK,CAACe,GAAD,CAAX,EAAkBwF,KAAlB,CAAN;QACD;MACF;IACF,CAhBe;IAiBhB1E,SAASA,CAAC7B,KAAD;MACP,OACET,QAAQ,CAACS,KAAD,CAAR,2CAAwDD,KAAK,CAACC,KAAD,CAD/D;IAGD,CArBe;IAsBhBwB,OAAOA,CAACxB,KAAD;MACL,OAAOT,QAAQ,CAACS,KAAD,CAAR,GAAkB;QAAE,GAAGA;MAAL,CAAlB,GAAiCA,KAAxC;IACD;EAxBe,CAAX,CAAP;AA0BD;AAED;;;;SAIgBqE,SAAe1D,MAAA;EAC7B,OAAO,IAAI8B,MAAJ,CAAW;IAChB,GAAG9B,MADa;IAEhBkB,SAAS,EAAEA,CAAC7B,KAAD,EAAQuB,GAAR,KACTvB,KAAK,KAAKO,SAAV,IAAuBI,MAAM,CAACkB,SAAP,CAAiB7B,KAAjB,EAAwBuB,GAAxB,CAHT;IAIhBiB,OAAO,EAAEA,CAACxC,KAAD,EAAQuB,GAAR,KAAgBvB,KAAK,KAAKO,SAAV,IAAuBI,MAAM,CAAC6B,OAAP,CAAexC,KAAf,EAAsBuB,GAAtB;EAJhC,CAAX,CAAP;AAMD;AAED;;;;;;;SAOgBmF,OACdT,GAAA,EACAC,KAAA;EAEA,OAAO,IAAIzD,MAAJ,CAAW;IAChB5B,IAAI,EAAE,QADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAIT,QAAQ,CAACS,KAAD,CAAZ,EAAqB;QACnB,KAAK,MAAM8B,CAAX,IAAgB9B,KAAhB,EAAuB;UACrB,MAAM+B,CAAC,GAAG/B,KAAK,CAAC8B,CAAD,CAAf;UACA,MAAM,CAACA,CAAD,EAAIA,CAAJ,EAAOmE,GAAP,CAAN;UACA,MAAM,CAACnE,CAAD,EAAIC,CAAJ,EAAOmE,KAAP,CAAN;QACD;MACF;IACF,CAXe;IAYhBrE,SAASA,CAAC7B,KAAD;MACP,OACET,QAAQ,CAACS,KAAD,CAAR,2CAAwDD,KAAK,CAACC,KAAD,CAD/D;IAGD;EAhBe,CAAX,CAAP;AAkBD;AAED;;;;;;;SAOgB2G,OAAA;EACd,OAAOnD,MAAM,CAAC,QAAD,EAAYxD,KAAD;IACtB,OAAOA,KAAK,YAAY4G,MAAxB;EACD,CAFY,CAAb;AAGD;SASevE,IAAOsC,OAAA;EACrB,OAAO,IAAIlC,MAAJ,CAAW;IAChB5B,IAAI,EAAE,KADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAI2E,OAAO,IAAI3E,KAAK,YAAYsC,GAAhC,EAAqC;QACnC,KAAK,MAAMP,CAAX,IAAgB/B,KAAhB,EAAuB;UACrB,MAAM,CAAC+B,CAAD,EAAcA,CAAd,EAAiB4C,OAAjB,CAAN;QACD;MACF;IACF,CATe;IAUhBnD,OAAOA,CAACxB,KAAD;MACL,OAAOA,KAAK,YAAYsC,GAAjB,GAAuB,IAAIA,GAAJ,CAAQtC,KAAR,CAAvB,GAAwCA,KAA/C;IACD,CAZe;IAahB6B,SAASA,CAAC7B,KAAD;MACP,OACEA,KAAK,YAAYsC,GAAjB,gDAC4CvC,KAAK,CAACC,KAAD,CAFnD;IAID;EAlBe,CAAX,CAAP;AAoBD;AAED;;;;SAIgB6G,OAAA;EACd,OAAOrD,MAAM,CAAC,QAAD,EAAYxD,KAAD;IACtB,OACE,OAAOA,KAAP,KAAiB,QAAjB,0CACoCD,KAAK,CAACC,KAAD,CAF3C;EAID,CALY,CAAb;AAMD;SAsDegD,MAAM8D,QAAA;EACpB,MAAMP,KAAK,GAAGJ,KAAK,EAAnB;EAEA,OAAO,IAAI1D,MAAJ,CAAW;IAChB5B,IAAI,EAAE,OADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAI0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,CAAJ,EAA0B;QACxB,MAAMjB,MAAM,GAAGgI,IAAI,CAACC,GAAL,CAASF,QAAQ,CAAC/H,MAAlB,EAA0BiB,KAAK,CAACjB,MAAhC,CAAf;QAEA,KAAK,IAAI6F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7F,MAApB,EAA4B6F,CAAC,EAA7B,EAAiC;UAC/B,MAAM,CAACA,CAAD,EAAI5E,KAAK,CAAC4E,CAAD,CAAT,EAAckC,QAAQ,CAAClC,CAAD,CAAR,IAAe2B,KAA7B,CAAN;QACD;MACF;IACF,CAXe;IAYhB1E,SAASA,CAAC7B,KAAD;MACP,OACE0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,2CACoCD,KAAK,CAACC,KAAD,CAF3C;IAID;EAjBe,CAAX,CAAP;AAmBD;AAED;;;;;;;SAOgBa,KACdY,MAAA;EAEA,MAAMyC,IAAI,GAAGjF,MAAM,CAACiF,IAAP,CAAYzC,MAAZ,CAAb;EACA,OAAO,IAAIgB,MAAJ,CAAW;IAChB5B,IAAI,EAAE,MADU;IAEhBY,MAFgB;IAGhB,CAACQ,OAADA,CAASjC,KAAT;MACE,IAAIT,QAAQ,CAACS,KAAD,CAAZ,EAAqB;QACnB,KAAK,MAAM8B,CAAX,IAAgBoC,IAAhB,EAAsB;UACpB,MAAM,CAACpC,CAAD,EAAI9B,KAAK,CAAC8B,CAAD,CAAT,EAAcL,MAAM,CAACK,CAAD,CAApB,CAAN;QACD;MACF;IACF,CATe;IAUhBD,SAASA,CAAC7B,KAAD;MACP,OACET,QAAQ,CAACS,KAAD,CAAR,2CAAwDD,KAAK,CAACC,KAAD,CAD/D;IAGD;EAde,CAAX,CAAP;AAgBD;SAwDeiH,MAAM9D,OAAA;EACpB,MAAMkC,WAAW,GAAGlC,OAAO,CAACG,GAAR,CAAatB,CAAD,IAAOA,CAAC,CAACnB,IAArB,EAA2B7B,IAA3B,CAAgC,KAAhC,CAApB;EACA,OAAO,IAAIyD,MAAJ,CAAW;IAChB5B,IAAI,EAAE,OADU;IAEhBY,MAAM,EAAE,IAFQ;IAGhBI,SAASA,CAAC7B,KAAD,EAAQuB,GAAR;MACP,MAAM9C,QAAQ,GAAG,EAAjB;MAEA,KAAK,MAAMqH,CAAX,IAAgB3C,OAAhB,EAAyB;QACvB,MAAM,CAAC,GAAGJ,MAAJ,IAAc7B,GAAG,CAAClB,KAAD,EAAQ8F,CAAR,EAAWvE,GAAX,CAAvB;QACA,MAAM,CAAC2F,KAAD,IAAUnE,MAAhB;QAEA,IAAI,CAACmE,KAAK,CAAC,CAAD,CAAV,EAAe;UACb,OAAO,EAAP;QACD,CAFD,MAEO;UACL,KAAK,MAAM,CAAC1I,OAAD,CAAX,IAAwBuE,MAAxB,EAAgC;YAC9B,IAAIvE,OAAJ,EAAa;cACXC,QAAQ,CAAC0I,IAAT,CAAc3I,OAAd;YACD;UACF;QACF;MACF;MAED,OAAO,gDACyC6G,WADzC,yBACyEtF,KAAK,CACjFC,KADiF,CAD9E,EAIL,GAAGvB,QAJE,CAAP;IAMD;EA3Be,CAAX,CAAP;AA6BD;AAED;;;;SAIgB2I,QAAA;EACd,OAAO5D,MAAM,CAAC,SAAD,EAAY,MAAM,IAAlB,CAAb;AACD;;ACjpBD;;;;;;;;;;;SAWgBnC,OACdV,MAAA,EACA0G,SAAA,EACA7F,OAAA;EAEA,OAAO,IAAIiB,MAAJ,CAAW;IAChB,GAAG9B,MADa;IAEhBa,OAAO,EAAEA,CAACxB,KAAD,EAAQuB,GAAR;MACP,OAAOsB,EAAE,CAAC7C,KAAD,EAAQqH,SAAR,CAAF,GACH1G,MAAM,CAACa,OAAP,CAAeA,OAAO,CAACxB,KAAD,EAAQuB,GAAR,CAAtB,EAAoCA,GAApC,CADG,GAEHZ,MAAM,CAACa,OAAP,CAAexB,KAAf,EAAsBuB,GAAtB,CAFJ;IAGD;EANe,CAAX,CAAP;AAQD;AAED;;;;;;;SAOgB+F,UACd3G,MAAA,EACA4G,QAAA,EAGI;EAAA,IAFJpG,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAEI;EAEJ,OAAOC,MAAM,CAACV,MAAD,EAASyG,OAAO,EAAhB,EAAqB9H,CAAD;IAC/B,MAAMkI,CAAC,GAAG,OAAOD,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,EAAzC,GAA8CA,QAAxD;IAEA,IAAIjI,CAAC,KAAKiB,SAAV,EAAqB;MACnB,OAAOiH,CAAP;IACD;IAED,IAAI,CAACrG,OAAO,CAACsG,MAAT,IAAmB/H,aAAa,CAACJ,CAAD,CAAhC,IAAuCI,aAAa,CAAC8H,CAAD,CAAxD,EAA6D;MAC3D,MAAME,GAAG,GAAG;QAAE,GAAGpI;MAAL,CAAZ;MACA,IAAIqI,OAAO,GAAG,KAAd;MAEA,KAAK,MAAM5G,GAAX,IAAkByG,CAAlB,EAAqB;QACnB,IAAIE,GAAG,CAAC3G,GAAD,CAAH,KAAaR,SAAjB,EAA4B;UAC1BmH,GAAG,CAAC3G,GAAD,CAAH,GAAWyG,CAAC,CAACzG,GAAD,CAAZ;UACA4G,OAAO,GAAG,IAAV;QACD;MACF;MAED,IAAIA,OAAJ,EAAa;QACX,OAAOD,GAAP;MACD;IACF;IAED,OAAOpI,CAAP;EACD,CAxBY,CAAb;AAyBD;AAED;;;;;;;SAOgBsI,QAAcjH,MAAA;EAC5B,OAAOU,MAAM,CAACV,MAAD,EAASkG,MAAM,EAAf,EAAoBvH,CAAD,IAAOA,CAAC,CAACuI,IAAF,EAA1B,CAAb;AACD;;AC7ED;;;;SAIgBC,MAGdnH,MAAA;EACA,MAAMoH,QAAQ,0BAAwBpH,MAAM,CAACE,IAA7C;EAEA,OAAOmH,MAAM,CAACrH,MAAD,EAAS,OAAT,EAAmBX,KAAD;IAC7B,IAAIA,KAAK,YAAYoC,GAAjB,IAAwBpC,KAAK,YAAYsC,GAA7C,EAAkD;MAChD,MAAM;QAAE2F;MAAF,IAAWjI,KAAjB;MACA,OACEiI,IAAI,KAAK,CAAT,IAAiBF,QAAjB,0CAA+DE,IAA/D,MADF;IAGD,CALD,MAKO;MACL,MAAM;QAAElJ;MAAF,IAAaiB,KAAnB;MACA,OACEjB,MAAM,KAAK,CAAX,IACGgJ,QADH,4CACmDhJ,MADnD,MADF;IAID;EACF,CAbY,CAAb;AAcD;AAED;;;;SAIgBiI,IACdrG,MAAA,EACAuH,SAAA,EAGI;EAAA,IAFJ/G,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAEI;EAEJ,MAAM;IAAE+G;EAAF,IAAgBhH,OAAtB;EACA,OAAO6G,MAAM,CAACrH,MAAD,EAAS,KAAT,EAAiBX,KAAD;IAC3B,OAAOmI,SAAS,GACZnI,KAAK,GAAGkI,SADI,GAEZlI,KAAK,IAAIkI,SAAT,oBACgBvH,MAAM,CAACE,IADvB,uBAEIsH,SAAS,GAAG,EAAH,GAAQ,cAFrB,IAGKD,SAHL,uBAGiClI,KAHjC,MAFJ;EAMD,CAPY,CAAb;AAQD;AAED;;;;SAIgBoI,IACdzH,MAAA,EACAuH,SAAA,EAGI;EAAA,IAFJ/G,OAAA,GAAAC,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAEI;EAEJ,MAAM;IAAE+G;EAAF,IAAgBhH,OAAtB;EACA,OAAO6G,MAAM,CAACrH,MAAD,EAAS,KAAT,EAAiBX,KAAD;IAC3B,OAAOmI,SAAS,GACZnI,KAAK,GAAGkI,SADI,GAEZlI,KAAK,IAAIkI,SAAT,oBACgBvH,MAAM,CAACE,IADvB,uBAEIsH,SAAS,GAAG,EAAH,GAAQ,cAFrB,IAGKD,SAHL,uBAGiClI,KAHjC,MAFJ;EAMD,CAPY,CAAb;AAQD;AACD;;;;SAIgBqI,QACd1H,MAAA,EACAgG,MAAA;EAEA,OAAOqB,MAAM,CAACrH,MAAD,EAAS,SAAT,EAAqBX,KAAD;IAC/B,OACE2G,MAAM,CAAC2B,IAAP,CAAYtI,KAAZ,qBACcW,MAAM,CAACE,IADrB,oBACyC8F,MAAM,CAAC4B,MADhD,0BAC2EvI,KAD3E,OADF;EAID,CALY,CAAb;AAMD;AAED;;;;SAIgBiI,KAGdtH,MAAA,EAAsByH,GAAA,EAA2B;EAAA,IAAdpB,GAAA,GAAA5F,SAAA,CAAArC,MAAA,QAAAqC,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAAcgH,GAAA;EACjD,MAAML,QAAQ,mBAAiBpH,MAAM,CAACE,IAAtC;EACA,MAAM2H,EAAE,GAAGJ,GAAG,KAAKpB,GAAR,YAAsBoB,GAAtB,uBAA6CA,GAA7C,eAA4DpB,GAA5D,MAAX;EAEA,OAAOgB,MAAM,CAACrH,MAAD,EAAS,MAAT,EAAkBX,KAAD;IAC5B,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYgF,IAAlD,EAAwD;MACtD,OACGoD,GAAG,IAAIpI,KAAP,IAAgBA,KAAK,IAAIgH,GAA1B,IACGe,QADH,SACeS,EADf,uBACoCxI,KADpC,MADF;IAID,CALD,MAKO,IAAIA,KAAK,YAAYoC,GAAjB,IAAwBpC,KAAK,YAAYsC,GAA7C,EAAkD;MACvD,MAAM;QAAE2F;MAAF,IAAWjI,KAAjB;MACA,OACGoI,GAAG,IAAIH,IAAP,IAAeA,IAAI,IAAIjB,GAAxB,IACGe,QADH,qBAC2BS,EAD3B,0CACmEP,IADnE,MADF;IAID,CANM,MAMA;MACL,MAAM;QAAElJ;MAAF,IAAaiB,KAAnB;MACA,OACGoI,GAAG,IAAIrJ,MAAP,IAAiBA,MAAM,IAAIiI,GAA5B,IACGe,QADH,uBAC6BS,EAD7B,4CACuEzJ,MADvE,MADF;IAID;EACF,CAnBY,CAAb;AAoBD;AAED;;;;;;;;SAQgBiJ,OACdrH,MAAA,EACAxB,IAAA,EACAqD,OAAA;EAEA,OAAO,IAAIC,MAAJ,CAAW;IAChB,GAAG9B,MADa;IAEhB,CAAC6B,OAADA,CAASxC,KAAT,EAAgBuB,GAAhB;MACE,OAAOZ,MAAM,CAAC6B,OAAP,CAAexC,KAAf,EAAsBuB,GAAtB,CAAP;MACA,MAAMd,MAAM,GAAG+B,OAAO,CAACxC,KAAD,EAAQuB,GAAR,CAAtB;MACA,MAAM9C,QAAQ,GAAGuC,UAAU,CAACP,MAAD,EAASc,GAAT,EAAcZ,MAAd,EAAsBX,KAAtB,CAA3B;MAEA,KAAK,MAAMxB,OAAX,IAAsBC,QAAtB,EAAgC;QAC9B,MAAM;UAAE,GAAGD,OAAL;UAAcsC,UAAU,EAAE3B;QAA1B,CAAN;MACD;IACF;EAVe,CAAX,CAAP;AAYD"},"metadata":{},"sourceType":"module","externalDependencies":[]}