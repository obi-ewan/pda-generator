[{"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/index.js":"1","/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/App.js":"2","/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/reportWebVitals.js":"3","/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/PdaGenerator.js":"4"},{"size":535,"mtime":1682503974434,"results":"5","hashOfConfig":"6"},{"size":212,"mtime":1682503974434,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1682503974435,"results":"8","hashOfConfig":"6"},{"size":1904,"mtime":1682503974434,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pnopc9",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/index.js",[],[],"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/App.js",["24"],[],"import logo from './logo.svg';\nimport './App.css';\nimport PdaGenerator from './PdaGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PdaGenerator />\n    </div>\n  );\n}\n\nexport default App;\n\n","/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/reportWebVitals.js",[],[],"/Users/ewanm/projects/solana-pda-generator/solana-pda-generator/src/PdaGenerator.js",["25"],[],"import { PublicKey } from '@solana/web3.js';\nimport { useState } from 'react';\n\nfunction PdaGenerator() {\n  const [programIdSeed, setProgramIdSeed] = useState('');\n  const [accountSeeds, setAccountSeeds] = useState([]);\n  const [pda, setPda] = useState(null);\n\n  const addAccountSeedField = () => {\n    setAccountSeeds([...accountSeeds, '']);\n  };\n\n  const updateAccountSeed = (index, value) => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds[index] = value;\n    setAccountSeeds(newAccountSeeds);\n  };\n\n  const removeAccountSeedField = (index) => {\n    const newAccountSeeds = [...accountSeeds];\n    newAccountSeeds.splice(index, 1);\n    setAccountSeeds(newAccountSeeds);\n  };\n\n  const generatePda = async () => {\n    try {\n      const programId = new PublicKey(programIdSeed);\n      const accountSeedBuffers = accountSeeds.map((seed) => new TextEncoder().encode(seed));\n      const [pdaPublicKey, _] = await PublicKey.findProgramAddress(accountSeedBuffers, programId);\n      setPda(pdaPublicKey.toBase58());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <label htmlFor=\"programIdSeed\">Program ID seed:</label>\n        <input type=\"text\" id=\"programIdSeed\" value={programIdSeed} onChange={(e) => setProgramIdSeed(e.target.value)} />\n      </div>\n      <div>\n        <label htmlFor=\"accountSeeds\">Account seeds:</label>\n        <button onClick={addAccountSeedField}>Add seed</button>\n        {accountSeeds.map((seed, index) => (\n          <div key={index}>\n            <input type=\"text\" value={seed} onChange={(e) => updateAccountSeed(index, e.target.value)} />\n            <button onClick={() => removeAccountSeedField(index)}>Remove</button>\n          </div>\n        ))}\n      </div>\n      <button onClick={generatePda}>Generate PDA</button>\n      {pda && <div>PDA: {pda}</div>}\n    </div>\n  );\n}\n\nexport default PdaGenerator;\n\n",{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"26","severity":1,"message":"30","line":29,"column":28,"nodeType":"28","messageId":"29","endLine":29,"endColumn":29},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used."]